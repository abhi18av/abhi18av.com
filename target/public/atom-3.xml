<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>200ok - Consultancy, Research Lab, Incubator</title><subtitle>Consultancy - Research Lab - Incubator</subtitle><generator uri="https://perun.io/" version="0.4.3-SNAPSHOT">Perun</generator><link href="https://200ok.ch/" type="text/html"></link><link href="https://200ok.ch/atom-3.xml" rel="self"></link><link href="https://200ok.ch/atom.xml" rel="first"></link><link href="https://200ok.ch/atom-6.xml" rel="last"></link><link href="https://200ok.ch/atom-4.xml" rel="next"></link><link href="https://200ok.ch/atom-2.xml" rel="previous"></link><updated>2019-06-22T21:37:46Z</updated><id>https://200ok.ch/</id><author><name>200ok GmbH</name></author><entry><id>urn:uuid:2d8cd5c0-54f1-45c2-b4c4-853f302b8419</id><title>Create Orgmode tasks from Pivotal Tracker issues</title><link href="https://200ok.ch/posts/2018-07-15_create_org_mode_tasks_from_pivotal_tracker_issues.html" type="text/html" title="Create Orgmode tasks from Pivotal Tracker issues" rel="alternate"></link><published>2018-07-15T00:00:00Z</published><updated>2018-07-15T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/2018-07-15_create_org_mode_tasks_from_pivotal_tracker_issues.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;Create Orgmode tasks from Pivotal Tracker issues - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="Fetches issues from Pivotal and creates an Orgmode file for it" name="description"&gt;&lt;meta content="Create Orgmode tasks from Pivotal Tracker issues - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta content="Fetches issues from Pivotal and creates an Orgmode file for it" property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/2018-07-15_create_org_mode_tasks_from_pivotal_tracker_issues.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="Create Orgmode tasks from Pivotal Tracker issues - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta content="Fetches issues from Pivotal and creates an Orgmode file for it" name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/2018-07-15_create_org_mode_tasks_from_pivotal_tracker_issues.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/2018-07-15_create_org_mode_tasks_from_pivotal_tracker_issues.html" itemprop="url"&gt;Create Orgmode tasks from Pivotal Tracker issues&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2018-07-15&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;320&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;2&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Alain M. Lafon&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;I personally work a lot with Orgmode, but collaborate on bigger projects with other people through proprietary tools. Some of them are very good for collaboration like Pivotal Tracker. So it totally makes sense to use them in heterogeneous teams! In fact, very often it is me introducing them into the team.&lt;/p&gt;
&lt;p&gt;However, for my workflow (which is based on GTD) it is important to know that I have all my pending tasks visible in one place. In fact, that’s one of the great features of Orgmode - I have my meeting minutes, tasks with links to resources like mails, time tracking, etc, all in one place. Having some tasks scattered in different tools is dangerous, because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It’s easy to forget tasks in some tracker&lt;/li&gt;
&lt;li&gt;It’s not easy to have an overview of everything that’s pending and quickly create a ranking of importance&lt;/li&gt;
&lt;li&gt;It creates mental overhead&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For this reason, I import tasks from proprietary tools into my local Orgmode agenda. I don’t do anything fancy with it like two-way sync as this complicates matters a lot. Those external tools are great at what they do (collaboration [potentially in real time], exchanging assets, etc) and there is little sense to clone that functionality in Emacs. There’s more important things to do, at least^^&lt;/p&gt;
&lt;p&gt;My flow is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I have a cronjob running every 15 minutes retrieving tasks from external sources&lt;/li&gt;
&lt;li&gt;It creates a file readable in my local agenda&lt;/li&gt;
&lt;li&gt;When this file has changed since the last run (checked with =git=), I’ll get a desktop notification (through =notify-send=).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For importing tasks from Pivotal Tracker, I just open sourced my small script which you can find here: https://gitlab.com/200ok/tracker2org&lt;/p&gt;
&lt;p&gt;It’s nothing fancy, at all, but it might save you the time to write it yourself. Or you might just take the thought away that it might make sense to have a local copy of all the (potentially distributed) tasks.&lt;/p&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/orgmode.html"&gt;orgmode&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/emacs.html"&gt;#emacs&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/tooling.html"&gt;#tooling&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/productivity.html"&gt;#productivity&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/tracker2pivotal.html"&gt;#tracker2pivotal&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="emacs"></category><category term="tooling"></category><category term="productivity"></category><category term="tracker2pivotal"></category></entry><entry><id>urn:uuid:8a4b3414-c95c-42be-a4c4-563580127e57</id><title>Code Retreat in Ronco, Italien</title><link href="https://200ok.ch/posts/2018-06-17_code_retreat_quickshift_in_conco,_italy.html" type="text/html" title="Code Retreat in Ronco, Italien" rel="alternate"></link><published>2018-06-17T00:00:00Z</published><updated>2018-06-17T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/2018-06-17_code_retreat_quickshift_in_conco,_italy.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;Code Retreat in Ronco, Italien - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="Über die letzten drei Tagen haben wir ein wunderbar sonniges Code Retreat mit dem Team unseres Inkubators QuickShift in Ronco, Italien geniessen können." name="description"&gt;&lt;meta content="Code Retreat in Ronco, Italien - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta content="Über die letzten drei Tagen haben wir ein wunderbar sonniges Code Retreat mit dem Team unseres Inkubators QuickShift in Ronco, Italien geniessen können." property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/2018-06-17_code_retreat_quickshift_in_conco,_italy.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="Code Retreat in Ronco, Italien - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta content="Über die letzten drei Tagen haben wir ein wunderbar sonniges Code Retreat mit dem Team unseres Inkubators QuickShift in Ronco, Italien geniessen können." name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/2018-06-17_code_retreat_quickshift_in_conco,_italy.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/2018-06-17_code_retreat_quickshift_in_conco,_italy.html" itemprop="url"&gt;Code Retreat in Ronco, Italien&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2018-06-17&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;266&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;2&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Alain M. Lafon&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;Über die letzten drei Tage haben wir ein wunderbar sonniges Code Retreat mit dem Team unseres Inkubators &lt;a href="https://quickshift.ch"&gt;QuickShift&lt;/a&gt; in Ronco, Italien geniessen können.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/2018-06/17/coding3.jpg" /&gt; Im Freien entwickelt es sich am Besten!&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/2018-06/17/coffee_break.jpg" /&gt; Feinster italienischer Kafi macht gute Stimmung.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/2018-06/17/lago.jpg" /&gt; Vom Retreat Haus hat es einen wunderbaren Ausblick auf den Lago Maggiore&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/2018-06/17/coding1.jpg" /&gt; &lt;img src="/img/2018-06/17/coding4b.jpg" /&gt; Von Business-Entscheidungen hin zu Architektur und Entwicklung - alle sind konzentriert an der Arbeit!&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/2018-06/17/sunrise1.jpg" /&gt; Frühaufsteher bekommen jeden Morgen ein wunderbares Spektakel geschenkt.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/2018-06/17/sunrise2.jpg" /&gt;&lt;/p&gt;
&lt;h2 id="quickshift"&gt;QuickShift&lt;/h2&gt;
&lt;p&gt;QuickShift ist der automatische Einsatzplaner, der den Geschäftsführer entlastet und Schichtpläne erstellt mit denen alle Mitarbeiter zufrieden sind.&lt;/p&gt;
&lt;p&gt;Betriebe in denen es Rollen und Schichten gibt, stehen jeden Monat auf’s Neue vor einem schwer lösbaren Problem: Arbeitspläne erstellen, welche die Anforderungen des Betriebes abdecken, Mitarbeiter-Wünsche berücksichtigen und gesetzlich konform sind. Das Erstellen eines Arbeitsplanes bedeutet einen sehr hohen, manuellen und repetitiven Zeitaufwand.&lt;/p&gt;
&lt;p&gt;Mit QuickShift automatisieren wir die Erstellung von Einsatzplänen vollständig. Das entlastet die Geschäftsführung, welche die gewonnene Zeit anderweitig und sinnvoller einsetzen kann. Das Erstellen funktioniert auf Knopfdruck und berücksichtigt dabei Mitarbeiter-Wünsche, gesetzliche Regelungen sowie individuelle Bedürfnisse des Betriebes. Die Qualität der automatisch erstellten Einsatzpläne ist dabei deutlich höher als von Menschen erstellte Pläne. Das steigert die Zufriedenheit der Mitarbeiter.&lt;/p&gt;
&lt;p&gt;Das QuickShift Team ist ideal für die Lösung dieser Herausforderung gewappnet - es besteht aus Veteranen aus dem Gastro-Bereich, hat tiefe Kenntnis über die dahinterstehenden mathematischen Probleme und hat 20 Jahre Erfahrung in der Entwicklung von Software-Lösungen.&lt;/p&gt;
&lt;p&gt;Nach 2 Jahren Markt-Sondierung, Tests und Prototyping ist QuickShift jetzt seit einem Monat bei verschiedenen Betrieben im Einsatz, welche sehr gutes Feedback geben. &lt;a href="https://quickshift.ch/"&gt;Melden auch Sie sich heute an&lt;/a&gt; und profitieren von QuickShift!&lt;/p&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/200ok.html"&gt;200ok&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/quickshift.html"&gt;#quickshift&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/code_retreat.html"&gt;#code_retreat&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="quickshift"></category><category term="code_retreat"></category></entry><entry><id>urn:uuid:18836293-284d-4d49-8557-a641a9360089</id><title>Slack HiDPI settings for Linux</title><link href="https://200ok.ch/posts/2018-06-12_slack_hidpi_settings_for_linux.html" type="text/html" title="Slack HiDPI settings for Linux" rel="alternate"></link><published>2018-06-12T00:00:00Z</published><updated>2018-06-12T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/2018-06-12_slack_hidpi_settings_for_linux.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;Slack HiDPI settings for Linux - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="How to configure Electron apps like Slack and Spotify under Linux to look good on HiDPI screens." name="description"&gt;&lt;meta content="Slack HiDPI settings for Linux - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta content="How to configure Electron apps like Slack and Spotify under Linux to look good on HiDPI screens." property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/2018-06-12_slack_hidpi_settings_for_linux.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="Slack HiDPI settings for Linux - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta content="How to configure Electron apps like Slack and Spotify under Linux to look good on HiDPI screens." name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/2018-06-12_slack_hidpi_settings_for_linux.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/2018-06-12_slack_hidpi_settings_for_linux.html" itemprop="url"&gt;Slack HiDPI settings for Linux&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2018-06-12&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;131&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;1&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Alain M. Lafon&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;If you recently upgraded the Slack Desktop App on Debian and now are wondering what happened to your automatic HiDPI recognition: Don’t worry any further. It’s a little peculiar, since this regression doesn’t seem to be well documented on the net. However, the solution is easy. Slack on the Desktop is an Electron app - therefore it generally supports the same flags that other Electon Apps (like Spotify) support and Electron &lt;a href="https://github.com/electron/electron/issues/615"&gt;has a flag since 2014&lt;/a&gt; &lt;code&gt;--force-device-scale-factor&lt;/code&gt;. On my Macbook Pro, I’m using a scale-factor of 1.5.&lt;/p&gt;
&lt;p&gt;Here’s a little convenience wrapper around the &lt;code&gt;slack&lt;/code&gt; binary to always start Slack with this setting. The same can be done for other Electron apps, as well.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/usr/local/bin/slack&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh

/usr/bin/slack --force-device-scale-factor=1.5&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/debian.html"&gt;debian&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/slack.html"&gt;#slack&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/electron.html"&gt;#electron&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/hidpi.html"&gt;#hidpi&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/spotify.html"&gt;#spotify&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="slack"></category><category term="electron"></category><category term="hidpi"></category><category term="spotify"></category></entry><entry><id>urn:uuid:1b14fdba-ae8b-4936-af07-049edc6e85ec</id><title>Make zsh recognize Projects you are working on</title><link href="https://200ok.ch/posts/2018-04-10_Make_zsh_recognise_Projects_you_are_working_on.html" type="text/html" title="Make zsh recognize Projects you are working on" rel="alternate"></link><published>2018-04-30T00:00:00Z</published><updated>2018-04-30T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/2018-04-10_Make_zsh_recognise_Projects_you_are_working_on.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;Make zsh recognize Projects you are working on - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="A snippet for ZSH to recognize project folders you changed to, so that when you create new shells (i.e. through opening a terminal) it changes to the last used project automatically." name="description"&gt;&lt;meta content="Make zsh recognize Projects you are working on - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta content="A snippet for ZSH to recognize project folders you changed to, so that when you create new shells (i.e. through opening a terminal) it changes to the last used project automatically." property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/2018-04-10_Make_zsh_recognise_Projects_you_are_working_on.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="Make zsh recognize Projects you are working on - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta content="A snippet for ZSH to recognize project folders you changed to, so that when you create new shells (i.e. through opening a terminal) it changes to the last used project automatically." name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/2018-04-10_Make_zsh_recognise_Projects_you_are_working_on.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/2018-04-10_Make_zsh_recognise_Projects_you_are_working_on.html" itemprop="url"&gt;Make zsh recognize Projects you are working on&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2018-04-30&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;903&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;7&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Phil Hofmann&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;TL;DR The following snippet added to you &lt;code&gt;~/.zshrc&lt;/code&gt; will recognize project folders you changed to, so that when you create new shells (i.e. through opening a terminal) it changes to the last used project automatically. Please find the complete snippet at the end of this post.&lt;/p&gt;
&lt;p&gt;Some projects have a lot of processes. While there are tools for orchestrating the startup of applications that require multiple processes, sometimes it just more convenient to open terminals for each of those processes. But having opened multiple terminals, it would be cumbersome to have to change to the project’s directory on each of those shells. And more generally, it would be nice to have a shell setup which is aware of the project I’m working on and thus could automatically change the directory to the current project as I spawn new terminals.&lt;/p&gt;
&lt;p&gt;Let’s make a list of what we need to make that happen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a persistent storage
&lt;ul&gt;
&lt;li&gt;to store the location of the current project to&lt;/li&gt;
&lt;li&gt;and to read the location of the current project from&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;a way to distinguish project directories from other directories&lt;/li&gt;
&lt;li&gt;a hook that hooks into the event of changing directories&lt;/li&gt;
&lt;li&gt;a way to automatically change the directory of a new shell&lt;/li&gt;
&lt;li&gt;optionally, a way to revert the last recognition of a project&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="storage"&gt;Storage&lt;/h2&gt;
&lt;p&gt;A flat file will do for storage. This file storage will be required throughout the upcoming code. Let’s put it in a variable &lt;code&gt;WD&lt;/code&gt;(for “working directory”).&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb1-1" title="1"&gt;&lt;span class="va"&gt;WD=&lt;/span&gt;~/.wd&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can easily save the current working directory:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb2-1" title="1"&gt;&lt;span class="bu"&gt;pwd&lt;/span&gt; &lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="va"&gt;$WD&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And read it back:&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb3-1" title="1"&gt;&lt;span class="va"&gt;CURRENT_PROJECT=&lt;/span&gt;&lt;span class="kw"&gt;`&lt;/span&gt;&lt;span class="fu"&gt;cat&lt;/span&gt; &lt;span class="va"&gt;$WD&lt;/span&gt;&lt;span class="kw"&gt;`&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But since we’re planning to be able to revert to the last detected project, we’ll actually use it as a stack, and thus instead of overwriting the file we’ll append to it.&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb4-1" title="1"&gt;&lt;span class="bu"&gt;pwd&lt;/span&gt; &lt;span class="op"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="va"&gt;$WD&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And when reading from the stack instead of reading the whole file we’ll just read the last line.&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb5-1" title="1"&gt;&lt;span class="va"&gt;CURRENT_PROJECT=&lt;/span&gt;&lt;span class="kw"&gt;`&lt;/span&gt;&lt;span class="fu"&gt;tail&lt;/span&gt; -1 &lt;span class="va"&gt;$WD&lt;/span&gt;&lt;span class="kw"&gt;`&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So reading and writing to the storage is set, let’s move on.&lt;/p&gt;
&lt;h2 id="project-or-nonproject-directory"&gt;Project or Nonproject Directory&lt;/h2&gt;
&lt;p&gt;Distinguishing project from nonproject directories is a tricky one and might depend on the tools you’re using. Since I’m using git in almost all of my projects, I settle with the presence of a &lt;code&gt;.git&lt;/code&gt; directory as an indicator for a project directory.&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb6-1" title="1"&gt;&lt;span class="kw"&gt;if [[&lt;/span&gt; &lt;span class="ot"&gt;-d&lt;/span&gt; .git&lt;span class="kw"&gt; ]]&lt;/span&gt;; &lt;span class="kw"&gt;then&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-2" title="2"&gt;  &lt;span class="co"&gt;# ...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-3" title="3"&gt;&lt;span class="kw"&gt;fi&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are using other VCSs, you need to change that, obviously. A good indicator might also be project settings files that are written by your editor or IDE or dependency/project automation files (like &lt;code&gt;Gemfile&lt;/code&gt; for Ruby, &lt;code&gt;package.json&lt;/code&gt; for JavaScript or &lt;code&gt;project.clj&lt;/code&gt; for Clojure).&lt;/p&gt;
&lt;h2 id="hooking-into-cd"&gt;Hooking into &lt;code&gt;cd&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Hooking into changing directories is fairly easy with zsh as it provides &lt;code&gt;chpwd&lt;/code&gt; among its so called &lt;a href="http://zsh.sourceforge.net/Doc/Release/Functions.html"&gt;“Hook Functions”&lt;/a&gt;. But it is a good practice to use &lt;code&gt;add-zsh-hook&lt;/code&gt;, which lets you register multiple functions to a hook.&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb7-1" title="1"&gt;&lt;span class="ex"&gt;autoload&lt;/span&gt; -U add-zsh-hook&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" title="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" title="3"&gt;&lt;span class="ex"&gt;add-zsh-hook&lt;/span&gt; chpwd recognize-project&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;recognize-project&lt;/code&gt; is a function that we still need to write as of yet.&lt;/p&gt;
&lt;p&gt;Other shells than zsh provide similar functionality. In some cases like bash you get away by wrapping the builtin &lt;code&gt;cd&lt;/code&gt; command in a function, that call the builtin but also runs you own code.&lt;/p&gt;
&lt;h2 id="automate-cd"&gt;Automate &lt;code&gt;cd&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Automatically changing to the last location stored is as easy as calling&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb8-1" title="1"&gt;&lt;span class="bu"&gt;cd&lt;/span&gt; &lt;span class="kw"&gt;`&lt;/span&gt;&lt;span class="fu"&gt;tail&lt;/span&gt; -1 &lt;span class="va"&gt;$WD&lt;/span&gt;&lt;span class="kw"&gt;`&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Adding this to you &lt;code&gt;~/.zshrc&lt;/code&gt; will run it automatically for each new shell. Just be aware that as long as &lt;code&gt;~/.wd&lt;/code&gt; is empty or doesn’t exist this will throw an error.&lt;/p&gt;
&lt;h2 id="in-practice"&gt;In Practice&lt;/h2&gt;
&lt;p&gt;Putting it together:&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb9-1" title="1"&gt;&lt;span class="co"&gt;#!/usr/bin/zsh&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-2" title="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-3" title="3"&gt;&lt;span class="ex"&gt;autoload&lt;/span&gt; -U add-zsh-hook&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-4" title="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-5" title="5"&gt;&lt;span class="va"&gt;WD=&lt;/span&gt;~/.wd&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-6" title="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-7" title="7"&gt;&lt;span class="fu"&gt;recognize-project()&lt;/span&gt; &lt;span class="kw"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-8" title="8"&gt;  &lt;span class="kw"&gt;if [[&lt;/span&gt; &lt;span class="ot"&gt;-d&lt;/span&gt; .git&lt;span class="kw"&gt; ]]&lt;/span&gt;; &lt;span class="kw"&gt;then&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-9" title="9"&gt;    &lt;span class="bu"&gt;pwd&lt;/span&gt; &lt;span class="op"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="va"&gt;$WD&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-10" title="10"&gt;  &lt;span class="kw"&gt;fi&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-11" title="11"&gt;&lt;span class="kw"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-12" title="12"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-13" title="13"&gt;&lt;span class="ex"&gt;add-zsh-hook&lt;/span&gt; chpwd recognize-project&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-14" title="14"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-15" title="15"&gt;&lt;span class="bu"&gt;cd&lt;/span&gt; &lt;span class="kw"&gt;`&lt;/span&gt;&lt;span class="fu"&gt;tail&lt;/span&gt; -1 &lt;span class="va"&gt;$WD&lt;/span&gt;&lt;span class="kw"&gt;`&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Used in practice, this quickly reveals some weaknesses.&lt;/p&gt;
&lt;h3 id="undo"&gt;Undo&lt;/h3&gt;
&lt;p&gt;Sometimes, while working on project A we just want to have one shell in project B to look something up, but we quickly release that the location of project B has been stored when opening the next shell and we would like to have the means of undoing that. In that case we just need to remove the last line from the storage (pop the stack), read the location before that and change to it.&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb10-1" title="1"&gt;&lt;span class="fu"&gt;previous-project()&lt;/span&gt; &lt;span class="kw"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" title="2"&gt;  &lt;span class="fu"&gt;sed&lt;/span&gt; -i &lt;span class="st"&gt;&amp;#39;$ d&amp;#39;&lt;/span&gt; &lt;span class="va"&gt;$WD&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-3" title="3"&gt;  &lt;span class="bu"&gt;cd&lt;/span&gt; &lt;span class="kw"&gt;`&lt;/span&gt;&lt;span class="fu"&gt;tail&lt;/span&gt; -1 &lt;span class="va"&gt;$WD&lt;/span&gt;&lt;span class="kw"&gt;`&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-4" title="4"&gt;&lt;span class="kw"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-5" title="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-6" title="6"&gt;&lt;span class="bu"&gt;alias&lt;/span&gt; pp=previous-project&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I like to give functions expressive names, but I don’t want to type these so I aliased &lt;code&gt;previous-project&lt;/code&gt; here to &lt;code&gt;pp&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="unique"&gt;Unique&lt;/h3&gt;
&lt;p&gt;Another weakness is that your our stack will quickly collect multiple consecutive equal lines. This is of no much use and in fact renders the just added undo feature useless. So to get rid of duplicate consecutive lines in our stack we’ll use some &lt;code&gt;sed&lt;/code&gt; magic:&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb11-1" title="1"&gt;&lt;span class="fu"&gt;sed&lt;/span&gt; -i &lt;span class="st"&gt;&amp;#39;$!N; /^\(.*\)\n\1$/!P; D&amp;#39;&lt;/span&gt; &lt;span class="va"&gt;$WD&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This reads: If it’s not the last line read the line and see if it is equal to the next line, if that is not the case print and in any case delete it. This will effectively remove duplicate consecutive lines and this keep our stack usable.&lt;/p&gt;
&lt;h2 id="finally"&gt;Finally&lt;/h2&gt;
&lt;p&gt;Ok, let’s put everything together! This gives us the complete snippet:&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb12-1" title="1"&gt;&lt;span class="co"&gt;#!/usr/bin/zsh&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-2" title="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-3" title="3"&gt;&lt;span class="ex"&gt;autoload&lt;/span&gt; -U add-zsh-hook&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-4" title="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-5" title="5"&gt;&lt;span class="va"&gt;WD=&lt;/span&gt;~/.wd&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-6" title="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-7" title="7"&gt;&lt;span class="fu"&gt;recognize-project()&lt;/span&gt; &lt;span class="kw"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-8" title="8"&gt;  &lt;span class="kw"&gt;if [[&lt;/span&gt; &lt;span class="ot"&gt;-d&lt;/span&gt; .git&lt;span class="kw"&gt; ]]&lt;/span&gt;; &lt;span class="kw"&gt;then&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-9" title="9"&gt;    &lt;span class="bu"&gt;pwd&lt;/span&gt; &lt;span class="op"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="va"&gt;$WD&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-10" title="10"&gt;    &lt;span class="co"&gt;# delete consecutive duplicate lines&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-11" title="11"&gt;    &lt;span class="fu"&gt;sed&lt;/span&gt; -i &lt;span class="st"&gt;&amp;#39;$!N; /^\(.*\)\n\1$/!P; D&amp;#39;&lt;/span&gt; &lt;span class="va"&gt;$WD&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-12" title="12"&gt;  &lt;span class="kw"&gt;fi&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-13" title="13"&gt;&lt;span class="kw"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-14" title="14"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-15" title="15"&gt;&lt;span class="ex"&gt;add-zsh-hook&lt;/span&gt; chpwd recognize-project&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-16" title="16"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-17" title="17"&gt;&lt;span class="fu"&gt;previous-project()&lt;/span&gt; &lt;span class="kw"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-18" title="18"&gt;  &lt;span class="co"&gt;# delete last line&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-19" title="19"&gt;  &lt;span class="fu"&gt;sed&lt;/span&gt; -i &lt;span class="st"&gt;&amp;#39;$ d&amp;#39;&lt;/span&gt; &lt;span class="va"&gt;$WD&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-20" title="20"&gt;  &lt;span class="bu"&gt;cd&lt;/span&gt; &lt;span class="kw"&gt;`&lt;/span&gt;&lt;span class="fu"&gt;tail&lt;/span&gt; -1 &lt;span class="va"&gt;$WD&lt;/span&gt;&lt;span class="kw"&gt;`&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-21" title="21"&gt;&lt;span class="kw"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-22" title="22"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-23" title="23"&gt;&lt;span class="bu"&gt;alias&lt;/span&gt; pp=previous-project&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-24" title="24"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-25" title="25"&gt;&lt;span class="bu"&gt;cd&lt;/span&gt; &lt;span class="kw"&gt;`&lt;/span&gt;&lt;span class="fu"&gt;tail&lt;/span&gt; -1 &lt;span class="va"&gt;$WD&lt;/span&gt;&lt;span class="kw"&gt;`&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/tricks.html"&gt;tricks&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/linux.html"&gt;#linux&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/console.html"&gt;#console&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/cli.html"&gt;#cli&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/terminal.html"&gt;#terminal&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/shell.html"&gt;#shell&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/zsh.html"&gt;#zsh&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="linux"></category><category term="console"></category><category term="cli"></category><category term="terminal"></category><category term="shell"></category><category term="zsh"></category></entry><entry><id>urn:uuid:4adfd949-5106-483a-befd-792e6ab41d34</id><title>Play Emacs like an Instrument</title><link href="https://200ok.ch/posts/2018-04-27_Play_Emacs_like_an_Instrument.html" type="text/html" title="Play Emacs like an Instrument" rel="alternate"></link><published>2018-04-27T00:00:00Z</published><updated>2018-04-27T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/2018-04-27_Play_Emacs_like_an_Instrument.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;Play Emacs like an Instrument - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="Play Emacs like an Instrument - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/2018-04-27_Play_Emacs_like_an_Instrument.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="Play Emacs like an Instrument - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/2018-04-27_Play_Emacs_like_an_Instrument.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/2018-04-27_Play_Emacs_like_an_Instrument.html" itemprop="url"&gt;Play Emacs like an Instrument&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2018-04-27&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;140&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;1&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Alain M. Lafon&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;Lean back and relax while enjoying a deep dive into the wonderful world of the Emacs editor. Emacs renaissance came with the advent of Clojure and undoubtedly is the most popular editor among Clojurians today. Of course there is a lot more you can do with Emacs, but much like playing an instrument, great skill only comes with practice.&lt;/p&gt;
&lt;p&gt;You neither need to be an Emacs user nor a Clojure Programmer and neither do you need to contemplate about becoming one either to enjoy this talk. Much like you don’t become a professional musician by attending a concert, but it might very well be inspiring.&lt;/p&gt;
&lt;p&gt;This talk was recorded at the &lt;a href="https://www.meetup.com/zh-clj-Zurich-Clojure-User-Group/"&gt;Clojure Meetup in Zurich, Switzerland&lt;/a&gt;.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/gfZDwYeBlO4" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;
&lt;/iframe&gt;
&lt;p&gt;The slides are available for download:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/munen/talk_play_emacs_like_an_instrument"&gt;Github Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/munen/talk_play_emacs_like_an_instrument/raw/master/playing_emacs_like_an_instrument.pdf"&gt;Direct link to PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find my (literate) Emacs configuration here: &lt;a href="https://github.com/munen/emacs.d/"&gt;https://github.com/munen/emacs.d/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/emacs.html"&gt;Emacs&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/talks.html"&gt;#talks&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/public_appearance.html"&gt;#public_appearance&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/200ok.html"&gt;#200ok&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/clojure.html"&gt;#clojure&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/elisp.html"&gt;#elisp&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/ruby.html"&gt;#ruby&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/javascript.html"&gt;#javascript&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="talks"></category><category term="public_appearance"></category><category term="200ok"></category><category term="clojure"></category><category term="elisp"></category><category term="ruby"></category><category term="javascript"></category></entry><entry><id>urn:uuid:2be120b7-7f97-44b8-810f-137c1c8ae9f6</id><title>QuickShift geht in die Beta Phase</title><link href="https://200ok.ch/posts/2018-04-21_quickshift-news.html" type="text/html" title="QuickShift geht in die Beta Phase" rel="alternate"></link><published>2018-04-21T00:00:00Z</published><updated>2018-04-21T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/2018-04-21_quickshift-news.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;QuickShift geht in die Beta Phase - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="QuickShift geht in die Beta Phase - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/2018-04-21_quickshift-news.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="QuickShift geht in die Beta Phase - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/2018-04-21_quickshift-news.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/2018-04-21_quickshift-news.html" itemprop="url"&gt;QuickShift geht in die Beta Phase&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2018-04-21&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;163&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;1&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Alain M. Lafon&lt;/span&gt;&lt;/section&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Phil Hofmann&lt;/span&gt;&lt;/section&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Pascal Huber&lt;/span&gt;&lt;/section&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Mischa Steiner&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;h2 id="erste-einsatzpläne-mit-quickshift"&gt;Erste Einsatzpläne mit QuickShift&lt;/h2&gt;
&lt;p style="background-color: #999;"&gt;
&lt;img src="/img/products/quickshift_logo.png" alt="QuickShift Logo"&gt;
&lt;/p&gt;
&lt;p&gt;Die Entwicklung von &lt;a href="https://quickshift.ch/"&gt;QuickShift&lt;/a&gt; schreitet weiter voran. Wir freuen uns, mitteilen zu können, dass wir mit dem ersten Gastro-Unternehmen den Betrieb aufnehmen! Das Grübeln über Einsatzpläne kann auch bei Ihnen bald ein Ende haben. Im Verlaufe des Jahres werden wir immer mehr Betriebe aufnehmen. Wir würden uns freuen, wenn auch Ihr Betrieb diese Gelegenheit am Schopf packt!&lt;/p&gt;
&lt;h3 id="jedes-gastro-unternehmen-ist-individuell"&gt;Jedes Gastro-Unternehmen ist individuell&lt;/h3&gt;
&lt;p&gt;Gewisse Bedingungen bei der Erstellung von Einsatzplänen sind für alle Betriebe gleich. Dazu zählt beispielsweise das Einhalten der LGAV-Bedingungen. Auch versuchen die meisten Betriebe Wünsche Ihrer Angestellten zu berücksichtigen. Jeder Unternehmer hat aber auch ganz individuelle Ansprüche an seine Einsatzpläne. In &lt;a href="https://quickshift.ch/"&gt;QuickShift&lt;/a&gt; können diese Anforderungen auf einfach Art und Weise integriert werden. Auch kommen wir sehr gerne zu einem persönlichen Gespräch vorbei, um Ihre Bedürfnisse aufzunehmen und für Sie eine optimale Lösung zu finden.&lt;/p&gt;
&lt;h3 id="auf-dem-laufenden-bleiben"&gt;Auf dem Laufenden bleiben&lt;/h3&gt;
&lt;p&gt;Bleiben Sie mit unserem &lt;a href="https://quickshift.ch/"&gt;Newsletter&lt;/a&gt; auf dem Laufenden und profitieren Sie von 50% Rabatt im ersten Jahr!&lt;/p&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/200ok.html"&gt;200ok&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/incubators.html"&gt;#incubators&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/quickshift.html"&gt;#quickshift&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="incubators"></category><category term="quickshift"></category></entry><entry><id>urn:uuid:75849f20-8cae-41e3-a4dd-06ce5248b19c</id><title>Writing solid End-to-End-Tests with Buoys</title><link href="https://200ok.ch/posts/2018-03-28_writing_solid_end_to_end_tests_with_buoys.html" type="text/html" title="Writing solid End-to-End-Tests with Buoys" rel="alternate"></link><published>2018-03-31T00:00:00Z</published><updated>2018-03-31T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/2018-03-28_writing_solid_end_to_end_tests_with_buoys.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;Writing solid End-to-End-Tests with Buoys - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="Writing solid End-to-End-Tests with Buoys - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/2018-03-28_writing_solid_end_to_end_tests_with_buoys.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="Writing solid End-to-End-Tests with Buoys - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/2018-03-28_writing_solid_end_to_end_tests_with_buoys.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/2018-03-28_writing_solid_end_to_end_tests_with_buoys.html" itemprop="url"&gt;Writing solid End-to-End-Tests with Buoys&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2018-03-31&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;1509&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;9&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Phil Hofmann&lt;/span&gt;&lt;/section&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Alain M. Lafon&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;&lt;em&gt;Testing&lt;/em&gt; deserves and requires it’s own spot in the development plan. It is understandable to only plan ahead sparingly, because many developers dislike testing. They tend to test gently, subconsciously knowing where the code will break and avoiding the weak spots. However, with the proper training and setup, you can find your bugs &lt;em&gt;now&lt;/em&gt; and not later.&lt;/p&gt;
&lt;p&gt;Finding bugs is somewhat like fishing with a net. At 200ok, we use fine, small nets (unit tests) to catch small fish, and big, coarse nets (integration tests) to catch the killer sharks.&lt;/p&gt;
&lt;p&gt;We encourage you to start testing as soon as you have code.&lt;/p&gt;
&lt;p&gt;Our mantra is: &lt;em&gt;Test early. Test often. Test Automatically.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Writing End-to-End-Tests will improve the quality of your application for some simple reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Before you’ve written any code, you know how you want it to behave&lt;/li&gt;
&lt;li&gt;Test software against a specification
&lt;ul&gt;
&lt;li&gt;Evaluate a program’s correctness after a change&lt;/li&gt;
&lt;li&gt;Yields examples for other developers&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It’s proven that using Test-Driven-Development (TDD) practices, your code will have better design and less bugs. For example, &lt;a href="https://www.microsoft.com/en-us/research/blog/exploding-software-engineering-myths/"&gt;Microsoft found&lt;/a&gt; in a study across multiple teams and products that TDD teams produce code with a 60-90% better defect density&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TDD Teams also take about 15-35% longer to complete projects&lt;/li&gt;
&lt;li&gt;The trade-off is significantly reduced post-release maintenance costs, since code quality is so much better&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Having said that, writing good End-to-End-Tests (aka. Integration- or Feature-Tests) is not trivial and therefore not favored by some programmers. One reason is that compared to other tests, they are rather unwieldy. More important though, when written without the proper guideline, they will often be brittle.&lt;/p&gt;
&lt;p&gt;End-to-End-Tests, as the name suggest, have to integrate the whole system, and thus there is probably not much we can do about &lt;em&gt;unwieldy&lt;/em&gt;, apart from having a nice DSL to make them more concise and thus more readable.&lt;/p&gt;
&lt;p&gt;However, even if they are rather slow, they are comparatively fast compared to do integration testing by hand. Why? For every new feature developed, there is an exponential amount of work to be done for regression testing. Let’s compare the effort of manually testing an application over time (as more features are developed) with automated Integration-Tests.&lt;/p&gt;
&lt;!-- Gnuplot Graph --&gt;
&lt;!--
ManualTesting(x) = x**2
AutomatedTesting(x) = x**1.2+4
set xlabel "Features in application" font "Helvetica,15"
set ylabel "Time to test all features" font "Helvetica,15"
set tics font "Helvetica,15"
set xtics 1
set grid
plot [t=0:5] ManualTesting(t), AutomatedTesting(t)
--&gt;
&lt;p&gt;With automated tests, you leave the hard, repetitive and boring work to the machine. Those kinds of jobs, machines are very good at - whereas humans get bored and make mistakes on repetitive tasks.&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/img/2018-03/save_time_with_tests.png" alt="Save time with Tests" /&gt;&lt;figcaption&gt;Save time with Tests&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;As you can see, there definitively is an initial overhead of writing integration tests compared to testing by hand. However, as soon as some more features are developed, the automated test suite gains quickly and overtakes the manual testing process.&lt;/p&gt;
&lt;p&gt;Note: Consider the math of the graph above as a rule of thumb. The actual effort for both automated tests and manual tests are very different for different kinds of programs. Therefore this is nothing more than a rough sketch, not an actual scientifically proven fact for every scenario.&lt;/p&gt;
&lt;p&gt;So, yes, compared to other kinds of automated tests, Integration-Tests are unwieldy and slow. However, compared to the only other solution (manual testing), they are very fast!&lt;/p&gt;
&lt;p&gt;Having spoken about speed, we should speak about brittleness.&lt;/p&gt;
&lt;h3 id="brittle-typical-end-to-end-tests"&gt;Brittle (typical) End-to-End-Tests&lt;/h3&gt;
&lt;p&gt;A typical End-To-End-Test visits a page in the application, simulates some user interactions, like filling in a form and clicking a button or a link, and then asserts certain facts about the resulting page.&lt;/p&gt;
&lt;p&gt;Over the years, we found that End-To-End-Tests often break, when there is work done in the markup or even in the design. The feature might still work perfectly fine, but the tests did use some implementation detail like a name or a CSS class that isn’t being used anymore - and voilà: the tests fails. This is unacceptable. It costs time and resources to fix these tests even though the code works and there is no regression. Such a test doesn’t fullfill its duty as a warning system for regressions, it is a false positive. And a warning system that has too many false alarms is of no use. With too many false alarms no one will duck and cover when the real alarm sounds. So let’s fix those false positives.&lt;/p&gt;
&lt;p&gt;The following example uses &lt;a href="http://rspec.info/"&gt;Rspec&lt;/a&gt; (with &lt;a href="https://github.com/teamcapybara/capybara"&gt;Capybara&lt;/a&gt;). This is a setup in a typical Rails app, but the overall strategy to solve the discussed issues can be applied in any technology stack. Capybara is very expressive, so it’ll be easy for you to transpose the knowledge to a different stack.&lt;/p&gt;
&lt;p&gt;Let’s start with a typical – a brittle – test.&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode ruby"&gt;&lt;code class="sourceCode ruby"&gt;&lt;a class="sourceLine" id="cb1-1" title="1"&gt;describe &lt;span class="st"&gt;&amp;#39;Login&amp;#39;&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" title="2"&gt;  it &lt;span class="st"&gt;&amp;#39;logs the user in&amp;#39;&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" title="3"&gt;    visit &lt;span class="ch"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" title="4"&gt;    fill_in &lt;span class="st"&gt;&amp;#39;user_email&amp;#39;&lt;/span&gt;, &lt;span class="st"&gt;with: &amp;#39;foo@bar.com&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" title="5"&gt;    fill_in &lt;span class="st"&gt;&amp;#39;user_password&amp;#39;&lt;/span&gt;, &lt;span class="st"&gt;with: &amp;#39;secret&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" title="6"&gt;    find(&lt;span class="st"&gt;&amp;#39;.login&amp;#39;&lt;/span&gt;).click&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" title="7"&gt;    expect(page).to have_selector(&lt;span class="st"&gt;&amp;#39;.dashboard&amp;#39;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-8" title="8"&gt;  &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-9" title="9"&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The test goes to the root page, fills in the login form, submits it and then asserts the existence of an element with a specific class on the resulting page. To do that, it needs to reference elements in the page and that’s OK. However, the test is tightly coupled to implementation details, like: The email field is named &lt;code&gt;user_email&lt;/code&gt;, the password field is named &lt;code&gt;user_password&lt;/code&gt;, the submit button has the class &lt;code&gt;login&lt;/code&gt;, and the resulting page has an element with the class &lt;code&gt;dashboard&lt;/code&gt;. That makes it a brittle test!&lt;/p&gt;
&lt;p&gt;The origin for all these names and classes are beyond the scope of an Integration-Test. The names of the form are likely coupled with the model and for the CSS classes it’s likely that some CSS styles are attached to these classes for layouting purposes.&lt;/p&gt;
&lt;p&gt;Having established that the origin of the names are beyond the scope of the test means that these names might change at &lt;em&gt;any time&lt;/em&gt;. This leads to a situation where the test will fail and give a false positive. The feature still works, but the test fails because the feature has been implemented in a different way.&lt;/p&gt;
&lt;p&gt;To solve this issue, it’s good practice to introduce a CSS namespace for testing. Let’s prefix the existing names with &lt;code&gt;test-&lt;/code&gt;. In our test, we used two CSS classes &lt;code&gt;login&lt;/code&gt; and &lt;code&gt;dashboard&lt;/code&gt;, so we introduce &lt;code&gt;test-login&lt;/code&gt; and &lt;code&gt;test-dashboard&lt;/code&gt;. Let us call these classes &lt;strong&gt;buoys&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id="introducing-buoys"&gt;Introducing Buoys&lt;/h3&gt;
&lt;p&gt;In our markup, we add the buoy &lt;code&gt;test-login&lt;/code&gt; to the submit button and the buoy &lt;code&gt;test-dashboard&lt;/code&gt; to the element with the class &lt;code&gt;dashboard&lt;/code&gt; on the resulting page. In our test, we will replace the existing references to CSS classes with our new namespaced classes.&lt;/p&gt;
&lt;p&gt;For form fields it’s more tricky. As the function &lt;code&gt;fill_in&lt;/code&gt; only takes an id (or name), but we still want to use our buoys, we will have to add one level of indirection. First we have to find the element in question and then we query it for its name to use that as the first argument to &lt;code&gt;fill_in&lt;/code&gt;.&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode ruby"&gt;&lt;code class="sourceCode ruby"&gt;&lt;a class="sourceLine" id="cb2-1" title="1"&gt;input = find(&lt;span class="st"&gt;:css&lt;/span&gt;, &lt;span class="st"&gt;&amp;#39;.test_user_email&amp;#39;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" title="2"&gt;fill_in input[&lt;span class="st"&gt;:name&lt;/span&gt;], &lt;span class="st"&gt;with: &amp;#39;foo@bar.com&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We do this likewise for all form fields. By doing so, we gain multiple benefits: Through namespacing, we avoid naming conflicts. Using a dedicated namespace in CSS for writing tests makes the references from tests to markup and CSS explicit in both directions. Before, we could read a test and see that it referenced elements in the markup via a CSS selector or other means. But there was no way to read the markup and see that an element is of significance to a test.&lt;/p&gt;
&lt;p&gt;Now, if we’re refactoring the markup and we see a class like &lt;code&gt;test-login&lt;/code&gt; on a button, we can assume that at least one test will use that class to identify the login button, and if it gets lost during refactoring, we expect that test to fail. Hence, it raises awareness that at least one test will fail if removed. You don’t get that out of regular CSS classes, because naturally you think they are for attaching styles - not tests. To a lesser degree of certainty, it additionally indicates that an element in the markup is covered by tests.&lt;/p&gt;
&lt;p&gt;This ultimately allows us to define certain rules, which we apply when we work with these classes.&lt;/p&gt;
&lt;h3 id="the-three-rules-for-working-with-buoys"&gt;The three rules for working with &lt;strong&gt;buoys&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;buoy&lt;/strong&gt; is a CSS class that starts with &lt;code&gt;test-&lt;/code&gt;. In that way &lt;strong&gt;buoys&lt;/strong&gt; make up a namespace within CSS.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;From your tests (or specs), only refer to &lt;strong&gt;buoys&lt;/strong&gt;, and give them meaningful names. Don’t use other CSS classes, nor other means of identifying elements in the markup.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Never attach any styles to &lt;strong&gt;buoys&lt;/strong&gt;. &lt;strong&gt;buoys&lt;/strong&gt; are for attaching tests, not styles.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When doing front-end work, like a redesign or changing markup, be careful to not lose any &lt;strong&gt;buoys&lt;/strong&gt;. Make a list of the &lt;strong&gt;buoys&lt;/strong&gt; you remove and put them back in when you’re done.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These rules will make our tests resilient to redesigns. This means that our tests will stay intact while we change the markup or design. They will prevent you from getting false positives from your test suite where tests fail, while your feature still is working perfectly fine.&lt;/p&gt;
&lt;p&gt;Happy testing!&lt;/p&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/coders tip.html"&gt;Coders Tip&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/testing.html"&gt;#testing&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="testing"></category></entry><entry><id>urn:uuid:00d91bdb-3f5a-424e-950f-05ab060491bc</id><title>Write your own brightness control</title><link href="https://200ok.ch/posts/2018-03-08_Write_your_own_brightness_control.html" type="text/html" title="Write your own brightness control" rel="alternate"></link><published>2018-03-08T00:00:00Z</published><updated>2018-03-08T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/2018-03-08_Write_your_own_brightness_control.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;Write your own brightness control - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="Write your own brightness control - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/2018-03-08_Write_your_own_brightness_control.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="Write your own brightness control - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/2018-03-08_Write_your_own_brightness_control.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/2018-03-08_Write_your_own_brightness_control.html" itemprop="url"&gt;Write your own brightness control&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2018-03-08&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;639&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;5&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Alain M. Lafon&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;Generally speaking, Linux tooling support is pretty great these days. I’m running Debian Stable on a Macbook Pro (MBP) and couldn’t be happier. Most things just work as expected.&lt;/p&gt;
&lt;p&gt;Apart from a few tiny things here and there. One of them is the ability to adjust brightness. The standard way for many window managers (WM) is to defer that functionality to &lt;code&gt;xbacklight&lt;/code&gt;. However, this doesn’t work on the MBP.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;munen@debzen:~% xbacklight
No outputs have backlight property&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;xbacklight&lt;/code&gt; looks for some settings in &lt;code&gt;/sys/class/backlight&lt;/code&gt;, but it’s not configurable under which sub-directory it looks. And for some reason, the drivers for the MBP puts the settings in different directory.&lt;/p&gt;
&lt;p&gt;While it would be proper to fix this upstream, I decided on working on this while on the train and being offline - so I took a quicker route and re-implemented the basic functionality in Ruby. To be able to get this done in a couple of minutes is a testament to the transparency and ease of use of a Linux system.&lt;/p&gt;
&lt;h2 id="steps-to-build-your-own-brightness-control"&gt;Steps to build your own brightness control&lt;/h2&gt;
&lt;h3 id="agenda"&gt;Agenda&lt;/h3&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Write a script to adjust brightness control&lt;/li&gt;
&lt;li&gt;Bind the script to your regular brightness keys on the keyboard&lt;/li&gt;
&lt;li&gt;Have some visual feedback on brightness&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="write-a-script"&gt;1. Write a script&lt;/h3&gt;
&lt;p&gt;Requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It should know about the upper bound of your hardware
&lt;ul&gt;
&lt;li&gt;Otherwise you could damage your hardware&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;It should accept parameters from the command line
&lt;ul&gt;
&lt;li&gt;Then it can be called from a WM shortcut&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;/usr/local/bin/brightness&lt;/code&gt;:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode ruby"&gt;&lt;code class="sourceCode ruby"&gt;&lt;a class="sourceLine" id="cb2-1" title="1"&gt;&lt;span class="kw"&gt;#!/usr/bin/env ruby&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" title="2"&gt;&lt;span class="co"&gt;# coding: utf-8&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" title="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" title="4"&gt;&lt;span class="co"&gt;# Get maximum and current brightness from `/sys` which is provided by&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-5" title="5"&gt;&lt;span class="co"&gt;# the kernel&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-6" title="6"&gt;&lt;span class="ot"&gt;@max_brightness&lt;/span&gt; = &lt;span class="st"&gt;`cat /sys/class/backlight/gmux_backlight/max_brightness`&lt;/span&gt;.to_i&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-7" title="7"&gt;&lt;span class="ot"&gt;@brightness&lt;/span&gt; = &lt;span class="st"&gt;`cat /sys/class/backlight/gmux_backlight/brightness`&lt;/span&gt;.to_i&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-8" title="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-9" title="9"&gt;&lt;span class="kw"&gt;def&lt;/span&gt; brighter&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-10" title="10"&gt;  &lt;span class="ot"&gt;@brightness&lt;/span&gt; = (&lt;span class="ot"&gt;@brightness&lt;/span&gt; * &lt;span class="fl"&gt;1.1&lt;/span&gt;).to_i&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-11" title="11"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-12" title="12"&gt;  &lt;span class="co"&gt;# Failsafe&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-13" title="13"&gt;  &lt;span class="ot"&gt;@brightness&lt;/span&gt; = &lt;span class="ot"&gt;@max_brightness&lt;/span&gt; &lt;span class="kw"&gt;if&lt;/span&gt;(&lt;span class="ot"&gt;@brightness&lt;/span&gt; &amp;gt; &lt;span class="ot"&gt;@max_brightness&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-14" title="14"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-15" title="15"&gt;  &lt;span class="co"&gt;# Start with a little light&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-16" title="16"&gt;  &lt;span class="ot"&gt;@brightness&lt;/span&gt; = &lt;span class="dv"&gt;50&lt;/span&gt; &lt;span class="kw"&gt;if&lt;/span&gt; (&lt;span class="ot"&gt;@brightness&lt;/span&gt; &amp;lt; &lt;span class="dv"&gt;50&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-17" title="17"&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-18" title="18"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-19" title="19"&gt;&lt;span class="kw"&gt;def&lt;/span&gt; darker&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-20" title="20"&gt;  &lt;span class="ot"&gt;@brightness&lt;/span&gt; = (&lt;span class="ot"&gt;@brightness&lt;/span&gt; * &lt;span class="fl"&gt;0.9&lt;/span&gt;).to_i&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-21" title="21"&gt;  &lt;span class="ot"&gt;@brightness&lt;/span&gt; = &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="kw"&gt;if&lt;/span&gt; (&lt;span class="ot"&gt;@brightness&lt;/span&gt; &amp;lt; &lt;span class="dv"&gt;40&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-22" title="22"&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-23" title="23"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-24" title="24"&gt;&lt;span class="co"&gt;# Note: This needs passwordless sudo privileges&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-25" title="25"&gt;&lt;span class="kw"&gt;def&lt;/span&gt; set_brightness&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-26" title="26"&gt;  &lt;span class="st"&gt;`echo &lt;/span&gt;&lt;span class="ot"&gt;#{@brightness}&lt;/span&gt;&lt;span class="st"&gt; | sudo tee /sys/class/backlight/gmux_backlight/brightness`&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-27" title="27"&gt;  puts &lt;span class="ot"&gt;@brightness&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-28" title="28"&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-29" title="29"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-30" title="30"&gt;&lt;span class="kw"&gt;def&lt;/span&gt; get_status&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-31" title="31"&gt;  puts &lt;span class="st"&gt;&amp;quot;💡 &lt;/span&gt;&lt;span class="ot"&gt;#{&lt;/span&gt;(&lt;span class="dv"&gt;100&lt;/span&gt; * &lt;span class="ot"&gt;@brightness&lt;/span&gt; / &lt;span class="fl"&gt;1023.0&lt;/span&gt;).to_i&lt;span class="ot"&gt;}&lt;/span&gt;&lt;span class="st"&gt;%&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-32" title="32"&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-33" title="33"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-34" title="34"&gt;&lt;span class="kw"&gt;case&lt;/span&gt; &lt;span class="dt"&gt;ARGV&lt;/span&gt;[&lt;span class="dv"&gt;0&lt;/span&gt;]&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-35" title="35"&gt;&lt;span class="kw"&gt;when&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;darker&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-36" title="36"&gt;  darker&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-37" title="37"&gt;  set_brightness&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-38" title="38"&gt;&lt;span class="kw"&gt;when&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;brighter&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-39" title="39"&gt;  brighter&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-40" title="40"&gt;  set_brightness&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-41" title="41"&gt;&lt;span class="kw"&gt;when&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-42" title="42"&gt;  get_status&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-43" title="43"&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If &lt;code&gt;xbacklight&lt;/code&gt; doesn’t work for you and the above script doesn’t work as well, then your driver might just use yet another folder to expose the brightness controls. Check out if there’s any folder in &lt;code&gt;/sys/class/backlight&lt;/code&gt; - if so, that’s probably the one and you can change the above script accordingly.&lt;/p&gt;
&lt;p&gt;This script should reside in &lt;code&gt;/usr/local/bin&lt;/code&gt; and have executable permission.&lt;/p&gt;
&lt;p&gt;The parameters are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;brighter&lt;/code&gt;: Increases brightness by 10%&lt;/li&gt;
&lt;li&gt;&lt;code&gt;darker&lt;/code&gt;: Decreases brightness by 10%&lt;/li&gt;
&lt;li&gt;&lt;code&gt;status&lt;/code&gt;: Prints the brightness status in percent&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="bind-the-script-to-shortcuts"&gt;2. Bind the script to shortcuts&lt;/h3&gt;
&lt;p&gt;First, find the keycodes to your brightness keys on the keyboard. Start the &lt;code&gt;xev&lt;/code&gt; command in a terminal, hit the brightness keys and look for the keycodes in the verbose output.&lt;/p&gt;
&lt;p&gt;Secondly, register the &lt;code&gt;brightness&lt;/code&gt; script as a shortcut. For example, this is the configuration for the i3 window manager:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~/.i3/config&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bindcode 232 exec &amp;quot;brightness darker&amp;quot;
bindcode 233 exec &amp;quot;brightness brighter&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Restart your window manager - or reload it with your config file. For i3, the latter is bound to &lt;code&gt;Mod+Shift+R&lt;/code&gt;. Then test the key bindings.&lt;/p&gt;
&lt;h3 id="visual-feedback"&gt;3. Visual feedback&lt;/h3&gt;
&lt;p&gt;Many people use onscreen displays for this. There are many existing tools that you could employ. I want this information in the status bar - so I augmented the &lt;code&gt;i3status&lt;/code&gt; status bar.&lt;/p&gt;
&lt;p&gt;To include new information in &lt;code&gt;i3status&lt;/code&gt;, you have to write a wrapper script around &lt;code&gt;i3status&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/usr/local/bin/my_i3status.sh&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh
# shell script to prepend i3status with brightness info

i3status | while :
do
        read line
        echo &amp;quot;`brightness status` | $line&amp;quot; || exit 1
done&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To use it, change the &lt;code&gt;status_command&lt;/code&gt; in &lt;code&gt;.i3/config&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bar {
        status_command my_i3status.sh
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reload your i3 config once again and enjoy the happy light light bulb^^&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/2018-03/i3_status.png" /&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/debian.html"&gt;Debian&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/linux.html"&gt;#linux&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/tooling.html"&gt;#tooling&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="linux"></category><category term="tooling"></category></entry><entry><id>urn:uuid:872f6ea12523e358594e523c5c251ab3</id><title>Redux in 30 lines of ClojureScript</title><link href="https://200ok.ch/posts/minimal-redux-clojurescript.html" type="text/html" title="Redux in 30 lines of ClojureScript" rel="alternate"></link><published>2018-02-26T00:00:00Z</published><updated>2018-02-26T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/minimal-redux-clojurescript.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;Redux in 30 lines of ClojureScript - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="Redux in 30 lines of ClojureScript - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/minimal-redux-clojurescript.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="Redux in 30 lines of ClojureScript - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/minimal-redux-clojurescript.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/minimal-redux-clojurescript.html" itemprop="url"&gt;Redux in 30 lines of ClojureScript&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2018-02-26&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;507&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;5&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Josef Erben&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;&lt;a href="https://redux.js.org/introduction/core-concepts"&gt;Redux&lt;/a&gt; is a popular choice when it comes to dealing with state in larger single page applications. But even smaller applications might benefit from a redux architecture. I will show you how to implement redux in less than 30 lines of ClojureScript to get a &lt;strong&gt;clean application structure&lt;/strong&gt; and to &lt;strong&gt;reduce cognitive load&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="redux.reducer"&gt;redux.reducer&lt;/h2&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode clojure"&gt;&lt;code class="sourceCode clojure"&gt;&lt;a class="sourceLine" id="cb1-1" title="1"&gt;(&lt;span class="kw"&gt;ns&lt;/span&gt; redux.reducer)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" title="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" title="3"&gt;(&lt;span class="bu"&gt;defmulti&lt;/span&gt;&lt;span class="fu"&gt; Action&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" title="4"&gt;  (&lt;span class="kw"&gt;fn&lt;/span&gt; [state action]&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" title="5"&gt;    (&lt;span class="at"&gt;:type&lt;/span&gt; action)))&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" title="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" title="7"&gt;(&lt;span class="bu"&gt;defmethod&lt;/span&gt;&lt;span class="fu"&gt; Action &lt;/span&gt;&lt;span class="at"&gt;:default&lt;/span&gt; [state {&lt;span class="at"&gt;:keys&lt;/span&gt; [&lt;span class="kw"&gt;type&lt;/span&gt;] &lt;span class="at"&gt;:as&lt;/span&gt; action-data}]&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-8" title="8"&gt;  (&lt;span class="kw"&gt;prn&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;Action of &amp;quot;&lt;/span&gt; &lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="st"&gt;&amp;quot; not defined.&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-9" title="9"&gt;  state)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is possible to keep the redux implementation so simple because of two features of Clojure. One of those features we are taking advantage of is &lt;em&gt;multimethods&lt;/em&gt;, my favorite form of Clojure’s runtime polymorphism. Throughout our app the only way to change the state of the redux store is by dispatching actions. You can define action types by setting &lt;em&gt;:type&lt;/em&gt;. Use it like this:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode clojure"&gt;&lt;code class="sourceCode clojure"&gt;&lt;a class="sourceLine" id="cb2-1" title="1"&gt;(r/dispatch! {&lt;span class="at"&gt;:type&lt;/span&gt; &lt;span class="at"&gt;:add-todo&lt;/span&gt; &lt;span class="at"&gt;:name&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;brew coffee&amp;quot;&lt;/span&gt;})&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your reducers &lt;strong&gt;always&lt;/strong&gt; have to return state!&lt;/p&gt;
&lt;h2 id="redux.core"&gt;redux.core&lt;/h2&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode clojure"&gt;&lt;code class="sourceCode clojure"&gt;&lt;a class="sourceLine" id="cb3-1" title="1"&gt;(&lt;span class="kw"&gt;ns&lt;/span&gt; redux.core&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" title="2"&gt;  (&lt;span class="at"&gt;:require-macros&lt;/span&gt; [cljs.core.async.macros &lt;span class="at"&gt;:refer&lt;/span&gt; [go go-loop]])&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" title="3"&gt;  (&lt;span class="at"&gt;:require&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" title="4"&gt;   [cljs.core.async &lt;span class="at"&gt;:as&lt;/span&gt; a]&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-5" title="5"&gt;   [reagent.core &lt;span class="at"&gt;:as&lt;/span&gt; r]&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-6" title="6"&gt;   [redux.reducer &lt;span class="at"&gt;:refer&lt;/span&gt; [Action]]))&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-7" title="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-8" title="8"&gt;(&lt;span class="bu"&gt;defonce&lt;/span&gt;&lt;span class="fu"&gt; !state &lt;/span&gt;(r/atom {}))&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-9" title="9"&gt;(&lt;span class="bu"&gt;defonce&lt;/span&gt;&lt;span class="fu"&gt; !actions &lt;/span&gt;(a/chan))&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-10" title="10"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-11" title="11"&gt;(&lt;span class="bu"&gt;defn&lt;/span&gt;&lt;span class="fu"&gt; dispatch! &lt;/span&gt;[action]&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-12" title="12"&gt;  (a/put! !actions action))&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-13" title="13"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-14" title="14"&gt;(go-loop []&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-15" title="15"&gt;  (&lt;span class="kw"&gt;when-let&lt;/span&gt; [a (a/&amp;lt;! !actions)]&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-16" title="16"&gt;    (&lt;span class="kw"&gt;swap!&lt;/span&gt; !state Action a)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-17" title="17"&gt;    (&lt;span class="kw"&gt;recur&lt;/span&gt;)))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The other feature we are using to concisely implement redux are &lt;strong&gt;channels&lt;/strong&gt;. Channels allow us to dispatch actions asynchronously from within other actions, which takes away at least half of the pain of building single page applications.&lt;/p&gt;
&lt;p&gt;The redux store is a &lt;code&gt;ratom&lt;/code&gt;, which is watched by reagent components and triggers re-renders.&lt;/p&gt;
&lt;p&gt;To query state in a component just require&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode clojure"&gt;&lt;code class="sourceCode clojure"&gt;&lt;a class="sourceLine" id="cb4-1" title="1"&gt;[redux.core &lt;span class="at"&gt;:as&lt;/span&gt; r]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and use&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode clojure"&gt;&lt;code class="sourceCode clojure"&gt;&lt;a class="sourceLine" id="cb5-1" title="1"&gt;&lt;span class="at"&gt;@r/!state&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="benefits"&gt;Benefits&lt;/h2&gt;
&lt;h3 id="structure"&gt;Structure&lt;/h3&gt;
&lt;p&gt;Redux can help you structuring your application. It becomes obvious to have a list of reducers and a list of components. While this is a sensible way to split state changing logic from the view in early stages of development, you might later group reducers/components by use cases.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── redux
│   ├── core.cljs
│   └── reducer.cljs
└── app
    ├── components
    │   ├── box.cljs
    │   ├── button.cljs
    │   ├── item.cljs
    │   ├── screen.cljs
    │   └── snackbar.cljs
    ├── core.cljs
    ├── reducers
    │   ├── components.cljs
    │   ├── validation.cljs
    │   ├── form.cljs
    │   └── websockets.cljs
    └── utils.cljs&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="reduced-cognitive-load"&gt;Reduced cognitive load&lt;/h3&gt;
&lt;p&gt;If you agree with Clojure’s way of dealing with complexity through isolation, you will agree with me on this point.&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode clojure"&gt;&lt;code class="sourceCode clojure"&gt;&lt;a class="sourceLine" id="cb7-1" title="1"&gt;(&lt;span class="bu"&gt;defmethod&lt;/span&gt;&lt;span class="fu"&gt; Action &lt;/span&gt;&lt;span class="at"&gt;:blur&lt;/span&gt; [s {&lt;span class="at"&gt;:keys&lt;/span&gt; [id evt]}]&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" title="2"&gt;  (r/dispatch! {&lt;span class="at"&gt;:type&lt;/span&gt; &lt;span class="at"&gt;:close-warning&lt;/span&gt;})&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" title="3"&gt;  (&lt;span class="kw"&gt;let&lt;/span&gt; [&lt;span class="kw"&gt;val&lt;/span&gt; (&lt;span class="kw"&gt;-&amp;gt;&lt;/span&gt; evt .-target .-value)]&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-4" title="4"&gt;    (r/dispatch! {&lt;span class="at"&gt;:type&lt;/span&gt; &lt;span class="at"&gt;:update-comp&lt;/span&gt; &lt;span class="at"&gt;:id&lt;/span&gt; id &lt;span class="at"&gt;:data&lt;/span&gt; textt &lt;span class="kw"&gt;val&lt;/span&gt;}))&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-5" title="5"&gt;  s)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While working on a reducer for an action type, you are looking at a pure &lt;sup&gt;1&lt;/sup&gt; function of action and state. There is neither any other state nor any affected components elsewhere, you can focus on building and returning the next state.&lt;/p&gt;
&lt;p&gt;In order to implement a redux app, start with the event handler, create empty reducers and implement reducers one by one.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt; We are dispatching an action from within the function. This is a semantically observable side effect and strictly speaking the function is not pure. Nevertheless, the side effect is applied in a controlled way to our system and reducers remaing easy to reason about. The argument of reduced cognitive load holds.&lt;/p&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/clojure.html"&gt;clojure&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/clojure.html"&gt;#clojure&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/redux.html"&gt;#redux&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/clojurescript.html"&gt;#clojurescript&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/state_management.html"&gt;#state_management&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="clojure"></category><category term="redux"></category><category term="clojurescript"></category><category term="state_management"></category></entry><entry><id>urn:uuid:b5cfdbb4-88bf-4708-92a3-e3df16c41bc8</id><title>List AWS S3 bucket objects with HTTP and XML</title><link href="https://200ok.ch/posts/2018-02-25_List_AWS_S3_bucket_with_HTTP_and_XML.html" type="text/html" title="List AWS S3 bucket objects with HTTP and XML" rel="alternate"></link><published>2018-02-26T00:00:00Z</published><updated>2018-02-26T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/2018-02-25_List_AWS_S3_bucket_with_HTTP_and_XML.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;List AWS S3 bucket objects with HTTP and XML - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="List AWS S3 bucket objects with HTTP and XML - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/2018-02-25_List_AWS_S3_bucket_with_HTTP_and_XML.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="List AWS S3 bucket objects with HTTP and XML - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/2018-02-25_List_AWS_S3_bucket_with_HTTP_and_XML.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/2018-02-25_List_AWS_S3_bucket_with_HTTP_and_XML.html" itemprop="url"&gt;List AWS S3 bucket objects with HTTP and XML&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2018-02-26&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;187&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;3&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Alain M. Lafon&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;AWS S3 has a great, but little known functionality: You can request metadata about the content of the bucket in XML. This makes it a great storage space for all kinds of batch oriented applications. No need for a self-written API.&lt;/p&gt;
&lt;p&gt;Requesting the metadata is easy, it’s just a &lt;code&gt;GET&lt;/code&gt; request to the root of the buckets’ URL: &lt;code&gt;http://[bucket_name].s3.amazonaws.com/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The response will look like this:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode xml"&gt;&lt;code class="sourceCode xml"&gt;&lt;a class="sourceLine" id="cb1-1" title="1"&gt;&lt;span class="kw"&gt;&amp;lt;ListBucketResult&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" title="2"&gt;  &lt;span class="kw"&gt;&amp;lt;Name&amp;gt;&lt;/span&gt;your-bucket-name&lt;span class="kw"&gt;&amp;lt;/Name&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" title="3"&gt;  &lt;span class="kw"&gt;&amp;lt;Prefix/&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" title="4"&gt;  &lt;span class="kw"&gt;&amp;lt;Marker/&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" title="5"&gt;  &lt;span class="kw"&gt;&amp;lt;MaxKeys&amp;gt;&lt;/span&gt;1000&lt;span class="kw"&gt;&amp;lt;/MaxKeys&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" title="6"&gt;  &lt;span class="kw"&gt;&amp;lt;IsTruncated&amp;gt;&lt;/span&gt;false&lt;span class="kw"&gt;&amp;lt;/IsTruncated&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" title="7"&gt;  &lt;span class="kw"&gt;&amp;lt;Contents&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-8" title="8"&gt;    &lt;span class="kw"&gt;&amp;lt;Key&amp;gt;&lt;/span&gt;your_filename.json&lt;span class="kw"&gt;&amp;lt;/Key&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-9" title="9"&gt;    &lt;span class="kw"&gt;&amp;lt;LastModified&amp;gt;&lt;/span&gt;2018-02-24T21:33:05.000Z&lt;span class="kw"&gt;&amp;lt;/LastModified&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-10" title="10"&gt;    &lt;span class="kw"&gt;&amp;lt;ETag&amp;gt;&lt;/span&gt;&amp;quot;da3cf2b69a251d0545fb67feb7b1e7ea&amp;quot;&lt;span class="kw"&gt;&amp;lt;/ETag&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-11" title="11"&gt;    &lt;span class="kw"&gt;&amp;lt;Size&amp;gt;&lt;/span&gt;5649&lt;span class="kw"&gt;&amp;lt;/Size&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-12" title="12"&gt;    &lt;span class="kw"&gt;&amp;lt;StorageClass&amp;gt;&lt;/span&gt;STANDARD&lt;span class="kw"&gt;&amp;lt;/StorageClass&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-13" title="13"&gt;  &lt;span class="kw"&gt;&amp;lt;/Contents&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-14" title="14"&gt;&lt;span class="kw"&gt;&amp;lt;/ListBucketResult&amp;gt;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The premise for this to work is that your bucket has to be configured correctly - your users will need to be able to &lt;code&gt;list&lt;/code&gt; the bucket and to &lt;code&gt;get&lt;/code&gt; objects from it. This is the appropriate AWS policy:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode json"&gt;&lt;code class="sourceCode json"&gt;&lt;a class="sourceLine" id="cb2-1" title="1"&gt;&lt;span class="fu"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" title="2"&gt;  &lt;span class="dt"&gt;&amp;quot;Version&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;2012-10-17&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" title="3"&gt;  &lt;span class="dt"&gt;&amp;quot;Statement&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="ot"&gt;[&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" title="4"&gt;    &lt;span class="fu"&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-5" title="5"&gt;      &lt;span class="dt"&gt;&amp;quot;Sid&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;PublicReadGetObject&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-6" title="6"&gt;      &lt;span class="dt"&gt;&amp;quot;Effect&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;Allow&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-7" title="7"&gt;      &lt;span class="dt"&gt;&amp;quot;Principal&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-8" title="8"&gt;      &lt;span class="dt"&gt;&amp;quot;Action&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="ot"&gt;[&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-9" title="9"&gt;        &lt;span class="st"&gt;&amp;quot;s3:GetObject&amp;quot;&lt;/span&gt;&lt;span class="ot"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-10" title="10"&gt;        &lt;span class="st"&gt;&amp;quot;s3:ListBucket&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-11" title="11"&gt;      &lt;span class="ot"&gt;]&lt;/span&gt;&lt;span class="fu"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-12" title="12"&gt;      &lt;span class="dt"&gt;&amp;quot;Resource&amp;quot;&lt;/span&gt;&lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="ot"&gt;[&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-13" title="13"&gt;        &lt;span class="st"&gt;&amp;quot;arn:aws:s3:::{{ bucket_name }}&amp;quot;&lt;/span&gt;&lt;span class="ot"&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-14" title="14"&gt;        &lt;span class="st"&gt;&amp;quot;arn:aws:s3:::{{ bucket_name }}/*&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-15" title="15"&gt;      &lt;span class="ot"&gt;]&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-16" title="16"&gt;    &lt;span class="fu"&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-17" title="17"&gt;  &lt;span class="ot"&gt;]&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-18" title="18"&gt;&lt;span class="fu"&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Furthermore your bucket needs to be configured to “host a website”. This is a property that you can set in the AWS S3 console.&lt;/p&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/cloud.html"&gt;cloud&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/aws.html"&gt;#aws&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/s3.html"&gt;#s3&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="aws"></category><category term="s3"></category></entry></feed>