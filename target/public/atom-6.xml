<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>200ok - Consultancy, Research Lab, Incubator</title><subtitle>Consultancy - Research Lab - Incubator</subtitle><generator uri="https://perun.io/" version="0.4.3-SNAPSHOT">Perun</generator><link href="https://200ok.ch/" type="text/html"></link><link href="https://200ok.ch/atom-6.xml" rel="self"></link><link href="https://200ok.ch/atom.xml" rel="first"></link><link href="https://200ok.ch/atom-6.xml" rel="last"></link><link href="https://200ok.ch/atom-5.xml" rel="previous"></link><updated>2019-06-22T21:37:46Z</updated><id>https://200ok.ch/</id><author><name>200ok GmbH</name></author><entry><id>urn:uuid:23207c54-6893-40bf-9bd1-81d498ea24d7</id><title>Change the color of the terminal during ssh</title><link href="https://200ok.ch/posts/change-color-of-terminal-during-ssh.html" type="text/html" title="Change the color of the terminal during ssh" rel="alternate"></link><published>2016-11-01T00:00:00Z</published><updated>2016-11-01T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/change-color-of-terminal-during-ssh.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;Change the color of the terminal during ssh - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="Change the color of the terminal during ssh - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/change-color-of-terminal-during-ssh.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="Change the color of the terminal during ssh - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/change-color-of-terminal-during-ssh.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/change-color-of-terminal-during-ssh.html" itemprop="url"&gt;Change the color of the terminal during ssh&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2016-11-01&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;104&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;1&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Phil Hofmann&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;I’m using the command line extensively, with plenty of black terminals side by side in my tiling window manager I was looking for something that helps distinguish remote shells (via ssh) from my local shells.&lt;/p&gt;
&lt;p&gt;Introducing one of my favorite tricks: Changing the background color of the terminal while running an ssh session.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function ssh() {
  dbus-send --session /net/sf/roxterm/Options net.sf.roxterm.Options.SetColourScheme string:$ROXTERM_ID string:Tango
  /usr/bin/ssh $@
  dbus-send --session /net/sf/roxterm/Options net.sf.roxterm.Options.SetColourScheme string:$ROXTERM_ID string:Default
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In my setup I’m using zsh and roxterm, but I’m sure it’ll work for other tools as well if you adjust it to yours.&lt;/p&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/tricks.html"&gt;tricks&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/linux.html"&gt;#linux&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/console.html"&gt;#console&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/cli.html"&gt;#cli&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/terminal.html"&gt;#terminal&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/shell.html"&gt;#shell&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/ssh.html"&gt;#ssh&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/dbus.html"&gt;#dbus&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/roxterm.html"&gt;#roxterm&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/zsh.html"&gt;#zsh&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="linux"></category><category term="console"></category><category term="cli"></category><category term="terminal"></category><category term="shell"></category><category term="ssh"></category><category term="dbus"></category><category term="roxterm"></category><category term="zsh"></category></entry><entry><id>urn:uuid:9330e642-4fea-4315-9291-15074bf6630e</id><title>RiotJS Module hot-loading Demo</title><link href="https://200ok.ch/posts/riotjs-module-hot-loading-demo.html" type="text/html" title="RiotJS Module hot-loading Demo" rel="alternate"></link><published>2016-11-01T00:00:00Z</published><updated>2016-11-01T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/riotjs-module-hot-loading-demo.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;RiotJS Module hot-loading Demo - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="RiotJS Module hot-loading Demo - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/riotjs-module-hot-loading-demo.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="RiotJS Module hot-loading Demo - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/riotjs-module-hot-loading-demo.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/riotjs-module-hot-loading-demo.html" itemprop="url"&gt;RiotJS Module hot-loading Demo&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2016-11-01&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;157&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;1&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Alain M. Lafon&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;Module Hot Loading enables a super efficient workflow without the pain of manual reloading of your web application. What do I mean by that? Well, the usual web developer cycle is:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Write code&lt;/li&gt;
&lt;li&gt;Save code&lt;/li&gt;
&lt;li&gt;Switch to Browser&lt;/li&gt;
&lt;li&gt;Hit Reload&lt;/li&gt;
&lt;li&gt;See what happens&lt;/li&gt;
&lt;li&gt;Switch back to Editor&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Half those steps (3, 4 and 6) are manual and very repetitive if you want to have an incremental development experience. They can be automated completely.&lt;/p&gt;
&lt;p&gt;There are some frameworks that support Module hot-loading by now. ClojureScript and Elm probably were the first languages to support that paradigm, but it’s possible in JavaScript as well, by now.&lt;/p&gt;
&lt;p&gt;This is a demo showing you how to incrementally build a super simple RiotJS application using module hot-loading. I never had to go back to the browser and hit ‘reload’. To be able to do this, I used the &lt;a href="https://github.com/esnunes/riotjs-loader"&gt;RiotJS-Loader&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the code of this demo, please see &lt;a href="https://github.com/munen/riotjs-module-hot-loading-demo"&gt;this repository&lt;/a&gt;.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Y9cGM71izVs" frameborder="0" allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/riotjs.html"&gt;riotjs&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/javascript.html"&gt;#javascript&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/spa.html"&gt;#spa&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/module.html"&gt;#module&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/webpack.html"&gt;#webpack&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="javascript"></category><category term="spa"></category><category term="module"></category><category term="webpack"></category></entry><entry><id>urn:uuid:0accc98c-020e-4293-9b8e-67a2e143a1c5</id><title>RiotJS and nested custom Tags within Tables</title><link href="https://200ok.ch/posts/riotjs-tables.html" type="text/html" title="RiotJS and nested custom Tags within Tables" rel="alternate"></link><published>2016-10-29T00:00:00Z</published><updated>2016-10-29T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/riotjs-tables.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;RiotJS and nested custom Tags within Tables - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="RiotJS and nested custom Tags within Tables - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/riotjs-tables.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="RiotJS and nested custom Tags within Tables - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/riotjs-tables.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/riotjs-tables.html" itemprop="url"&gt;RiotJS and nested custom Tags within Tables&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2016-10-29&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;311&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;3&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Alain M. Lafon&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;If you want to use &lt;a href="http://riotjs.com"&gt;RiotJS&lt;/a&gt; Custom Tags within a &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;, you might have stumbled upon something that looks like a bug. If you nest Custom Tags within a &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; element, they will not render within said element, but outside of it. Let me clarify with an example and how to fix it.&lt;/p&gt;
&lt;p&gt;If you have code that nests elements like this:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode html"&gt;&lt;code class="sourceCode html"&gt;&lt;a class="sourceLine" id="cb1-1" title="1"&gt;&lt;span class="kw"&gt;&amp;lt;todoList&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" title="2"&gt;    &lt;span class="kw"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" title="3"&gt;      &lt;span class="kw"&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" title="4"&gt;        &lt;span class="kw"&gt;&amp;lt;todo&lt;/span&gt;&lt;span class="ot"&gt; each=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;{ allTodos() }&amp;quot;&lt;/span&gt;&lt;span class="kw"&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" title="5"&gt;        &lt;span class="kw"&gt;&amp;lt;/todo&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" title="6"&gt;      &lt;span class="kw"&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" title="7"&gt;    &lt;span class="kw"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-8" title="8"&gt;&lt;span class="kw"&gt;&amp;lt;/todoList&amp;gt;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;code&gt;&amp;lt;todo&amp;gt;&lt;/code&gt; is defined as a totally legit table row, you will find that the result does not look like you imagined it. If you check your browsers developer tools, you will see that the browser renders your &lt;code&gt;&amp;lt;todo&amp;gt;&lt;/code&gt; elements unexpectedly outside the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; element. It might look like this:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode html"&gt;&lt;code class="sourceCode html"&gt;&lt;a class="sourceLine" id="cb2-1" title="1"&gt;&lt;span class="kw"&gt;&amp;lt;todolist&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" title="2"&gt;    &lt;span class="kw"&gt;&amp;lt;todo&amp;gt;&amp;lt;/todo&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" title="3"&gt;    &lt;span class="kw"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" title="4"&gt;    &lt;span class="kw"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-5" title="5"&gt;&lt;span class="kw"&gt;&amp;lt;/todolist&amp;gt;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The reason for this phenomenon is that browsers require known HTML elements within a &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt; elements. If anything else is issued to be rendered within, it is just ejected.&lt;/p&gt;
&lt;p&gt;No worries, though! RiotJS has a proper way of handling this type of situation. Standard HTML elements can be used as Riot Tags when you use the &lt;code&gt;data-is&lt;/code&gt; attribute. For the &lt;code&gt;&amp;lt;todoList&amp;gt;&lt;/code&gt; example above, this is functional code:&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode html"&gt;&lt;code class="sourceCode html"&gt;&lt;a class="sourceLine" id="cb3-1" title="1"&gt;&lt;span class="kw"&gt;&amp;lt;todoList&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" title="2"&gt;    &lt;span class="kw"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" title="3"&gt;      &lt;span class="kw"&gt;&amp;lt;tbody&lt;/span&gt; &lt;span class="kw"&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" title="4"&gt;        &lt;span class="kw"&gt;&amp;lt;tr&lt;/span&gt;&lt;span class="ot"&gt; each=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;{ allTodos() }&amp;quot;&lt;/span&gt;&lt;span class="ot"&gt; data-is=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;todo&amp;quot;&lt;/span&gt;&lt;span class="kw"&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-5" title="5"&gt;        &lt;span class="kw"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-6" title="6"&gt;      &lt;span class="kw"&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-7" title="7"&gt;    &lt;span class="kw"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-8" title="8"&gt;&lt;span class="kw"&gt;&amp;lt;/todoList&amp;gt;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example, the &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; tag is a legit HTML tag which the browser expects to be within a &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;. However, since we want to write modular composable code, we tell RiotJS to actually use the &lt;code&gt;&amp;lt;todo&amp;gt;&lt;/code&gt; component to compose the &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt;. For completeness, this would be valid code for a &lt;code&gt;&amp;lt;todo&amp;gt;&lt;/code&gt; component:&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode html"&gt;&lt;code class="sourceCode html"&gt;&lt;a class="sourceLine" id="cb4-1" title="1"&gt;&lt;span class="kw"&gt;&amp;lt;todo&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" title="2"&gt;  &lt;span class="kw"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-3" title="3"&gt;    &lt;span class="kw"&gt;&amp;lt;input&lt;/span&gt;&lt;span class="ot"&gt; type=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt;&lt;span class="ot"&gt; checked=&lt;/span&gt;&lt;span class="st"&gt;{&lt;/span&gt;&lt;span class="ot"&gt; done&lt;/span&gt; &lt;span class="er"&gt;}&lt;/span&gt; &lt;span class="kw"&gt;/&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-4" title="4"&gt;    { name }&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-5" title="5"&gt;  &lt;span class="kw"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-6" title="6"&gt;&lt;span class="kw"&gt;&amp;lt;/todo&amp;gt;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One last thing: A custom tag has to be lower-case only when used with &lt;code&gt;data-is&lt;/code&gt;, otherwise Riot will not pick it up. This is likely a bug and will be fixed in a future version.&lt;/p&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/riotjs.html"&gt;riotjs&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/javascript.html"&gt;#javascript&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/spa.html"&gt;#spa&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="javascript"></category><category term="spa"></category></entry><entry><id>urn:uuid:3eeda4a5-a749-417a-b07c-e7ded2407b73</id><title>Orgmode capture template for code snippets</title><link href="https://200ok.ch/posts/org-mode-capture-template-for-code-snippets.html" type="text/html" title="Orgmode capture template for code snippets" rel="alternate"></link><published>2016-05-01T00:00:00Z</published><updated>2016-05-01T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/org-mode-capture-template-for-code-snippets.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;Orgmode capture template for code snippets - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="Orgmode capture template for code snippets - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/org-mode-capture-template-for-code-snippets.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="Orgmode capture template for code snippets - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/org-mode-capture-template-for-code-snippets.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/org-mode-capture-template-for-code-snippets.html" itemprop="url"&gt;Orgmode capture template for code snippets&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2016-05-01&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;169&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;2&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Alain M. Lafon&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;Update: This is a re-post of an older blog post of mine. Originally it was posted on my &lt;a href="http://blog.dispatched.ch/2016/05/01/org-mode-capture-template-for-code-snippets/"&gt;personal blog&lt;/a&gt;. I’m deprecating my personal blog in favor of this 200OK blog.&lt;/p&gt;
&lt;script id="asciicast-bwri6pffkusss125a654tomjs" src="https://asciinema.org/a/bwri6pffkusss125a654tomjs.js" async="" type="text/javascript"&gt;&lt;/script&gt;
&lt;p&gt;You can use templates for different types of capture items, and for different target locations.&lt;/p&gt;
&lt;p&gt;The following code sets up three capture templates – for todos, media urls and code snippets (lines 4-7).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%?&lt;/code&gt; sets the exit point for the template, &lt;code&gt;%^g&lt;/code&gt; prompts for a tag, &lt;code&gt;%^{language}&lt;/code&gt; prompts for the language of the snippet and the remainder is boilerplate to create an org-mode entry (*) and an org-mode snippet (&lt;code&gt;#+BEGIN_SRC\n\n#+END_SRC&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;http://orgmode.org/manual/Template-expansion.html#Template-expansion&lt;/p&gt;
&lt;pre class="elisp"&gt;&lt;code&gt;(setq org-capture-templates
       &amp;#39;((&amp;quot;t&amp;quot; &amp;quot;Todo&amp;quot; entry (file+headline (concat org-directory &amp;quot;inbox.org&amp;quot;) &amp;quot;Tasks&amp;quot;)
          &amp;quot;* TODO %?\n  %U\n  %i\n  %a&amp;quot;)
        (&amp;quot;s&amp;quot; &amp;quot;Code Snippet&amp;quot; entry
         (file (concat org-directory &amp;quot;snippets.org&amp;quot;))
         ;; Prompt for tag and language
         &amp;quot;* %?\t%^g\n#+BEGIN_SRC %^{language}\n\n#+END_SRC&amp;quot;)
         (&amp;quot;m&amp;quot; &amp;quot;Media&amp;quot; entry
          (file+datetree (concat org-directory &amp;quot;media.org&amp;quot;))
          &amp;quot;* %?\nURL: \nEntered on %U\n&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/orgmode.html"&gt;orgmode&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/elisp.html"&gt;#elisp&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/emacs.html"&gt;#emacs&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/programming.html"&gt;#programming&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="elisp"></category><category term="emacs"></category><category term="programming"></category></entry><entry><id>urn:uuid:360ccd7a-933d-438a-95f5-c6eddf3cd39c</id><title>How to become a proficient Python programmer</title><link href="https://200ok.ch/posts/how-to-become-a-proficient-python-programmer.html" type="text/html" title="How to become a proficient Python programmer" rel="alternate"></link><published>2011-06-12T00:00:00Z</published><updated>2011-06-12T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/how-to-become-a-proficient-python-programmer.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;How to become a proficient Python programmer - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="How to become a proficient Python programmer - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/how-to-become-a-proficient-python-programmer.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="How to become a proficient Python programmer - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/how-to-become-a-proficient-python-programmer.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/how-to-become-a-proficient-python-programmer.html" itemprop="url"&gt;How to become a proficient Python programmer&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2011-06-12&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;665&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;4&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Alain M. Lafon&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;Update: This is a re-post of an older blog post of mine. Originally it was posted on my &lt;a href="http://blog.dispatched.ch/2011/06/12/how-to-become-a-proficient-python-programmer/"&gt;personal blog&lt;/a&gt; where it has &amp;gt;30 comments and &amp;gt;20’000 views over the last years. I’m deprecating my personal blog in favor of this 200OK blog.&lt;/p&gt;
&lt;p&gt;Spoiler: This post is primarily gonna be an excerpt of my bookmarks collection. That’s because more intelligent men than me have already written great articles on the topic of how to become a great Python programmer.&lt;/p&gt;
&lt;p&gt;I will focus on four primary topics: Functional programming, performance, testing and code guidelines. When those four aspects merge in one programmer, he or she will gain greatness no matter what.&lt;/p&gt;
&lt;h3 id="functional-programming"&gt;Functional programming&lt;/h3&gt;
&lt;p&gt;Writing code in an imperative style has become the de facto standard. Imperative programs consist of statements that describe change of state. While this might sometimes be a performant way of coding, it sometimes isn’t (for example for sake of complexity) – also, it probably is not the most intuitive way when compared with declarative programming.&lt;/p&gt;
&lt;p&gt;If you don’t know what I’m talking about, that’s great. Here are some starter articles to get your mind running. But beware, it’s a little like the red pill – once you tasted functional programming, you don’t want to go back.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amk.ca/python/writing/functional"&gt;http://www.amk.ca/python/writing/functional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.secnetix.de/olli/Python/lambda_functions.hawk"&gt;http://www.secnetix.de/olli/Python/lambda_functions.hawk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.python.org/howto/functional.html"&gt;http://docs.python.org/howto/functional.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="performance"&gt;Performance&lt;/h3&gt;
&lt;p&gt;There’s so much talk going on about how inefficient these ‘scripting languages’ (Python, Ruby, …) are, that it’s easy to forget that very often it’s the algorithm chosen by the programmer that leads to horrible runtime behaviour.&lt;/p&gt;
&lt;p&gt;Those articles are a great place to get a feel for the ins and outs of Python’s runtime behaviour, so you can get your high performing application writting in a language that is concise and fun to write. And if your manager asks about Python’s performance, don’t forget to mention that the second largest search engine in the world is run by Python – namely Youtube(see &lt;a href="http://www.python.org/about/quotes/"&gt;Python quotes&lt;/a&gt;).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jaynes.colorado.edu/PythonIdioms.html"&gt;http://jaynes.colorado.edu/PythonIdioms.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.python.org/moin/PythonSpeed/PerformanceTips"&gt;http://wiki.python.org/moin/PythonSpeed/PerformanceTips&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="testing"&gt;Testing&lt;/h3&gt;
&lt;p&gt;Testing is probably one the most misjudged topics in computer science these days. Some programmers really got it and emphasize TDD(test driven development) and it’s successor BDD(behaviour driven development) whereever possible. Others simply don’t feel it yet and think it’s a waste of time. Well, I’m gonna be that guy and tell you: If you haven’t started out on TDD/BDD yet, you have missed out greatly!&lt;/p&gt;
&lt;p&gt;It’s not about introducing a technology to replace that release management automaton in your company that mindlessly clicks through the application once in a while, it is about giving you a tool to deeply understand your own problem domain – to really conquer, manipulate and twist it the way you want and need it to be. If you haven’t yet, give it a shot. These articles will give you some impulses:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.oreillynet.com/lpt/a/5463"&gt;http://www.oreillynet.com/lpt/a/5463&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.oreillynet.com/lpt/a/5584"&gt;http://www.oreillynet.com/lpt/a/5584&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.cacr.caltech.edu/danse/index.php/Unit_testing_and_Integration_testing"&gt;http://wiki.cacr.caltech.edu/danse/index.php/Unit_testing_and_Integration_testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.python.org/library/unittest.html"&gt;http://docs.python.org/library/unittest.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="code-guidelines"&gt;Code guidelines&lt;/h3&gt;
&lt;p&gt;Not all code is created equal. Some can be read and changed by any great programmer out there. But some can only be read and only sometimes changed by the original author – and that maybe only a couple of hours after he or she wrote it. Why is that? Because of missing test coverage (see above) and the lack of proper usage of coding guidelines.&lt;/p&gt;
&lt;p&gt;These articles establish an absolute minimum to adhere to. When you follow these, you will write more consise and beautiful code. As a side effect it will be more readable and adaptable by you or anyone else.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.python.org/dev/peps/pep-0008/"&gt;http://www.python.org/dev/peps/pep-0008/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.fantascienza.net/leonardo/ar/python_best_practices.html"&gt;http://www.fantascienza.net/leonardo/ar/python_best_practices.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now go ahead and spread the word. Start with the guy sitting right next to you. Maybe you can go to the next hackathlon or code dojo and start becoming great proficient programmers together!&lt;/p&gt;
&lt;p&gt;All the best on your journey.&lt;/p&gt;
&lt;p&gt;If you liked this article, please feel free to re-tweet it and let others know.&lt;/p&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/python.html"&gt;python&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/coding.html"&gt;#coding&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/learning.html"&gt;#learning&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="coding"></category><category term="learning"></category></entry><entry><id>urn:uuid:e219ff9f-81b9-4728-ac2a-b94e018b1b55</id><title>Python’s binascii – hexlify() and unhexlify()</title><link href="https://200ok.ch/posts/2018-12-09_unhexlify.html" type="text/html" title="Python’s binascii – hexlify() and unhexlify()" rel="alternate"></link><published>2009-12-09T00:00:00Z</published><updated>2009-12-09T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/2018-12-09_unhexlify.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;Python’s binascii – hexlify() and unhexlify() - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="Python’s binascii – hexlify() and unhexlify() - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/2018-12-09_unhexlify.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="Python’s binascii – hexlify() and unhexlify() - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/2018-12-09_unhexlify.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/2018-12-09_unhexlify.html" itemprop="url"&gt;Python’s binascii – hexlify() and unhexlify()&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2009-12-09&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;574&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;4&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Alain M. Lafon&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;Some time ago, a dear friend of mine came up to me and asked about the Python module binascii – particularly about the methods &lt;code&gt;hexlify()&lt;/code&gt; and &lt;code&gt;unhexlify()&lt;/code&gt;. Since he asked for it, I’m going to share my answer publicly with you.&lt;/p&gt;
&lt;p&gt;First of all, I’m defining the used nomenclature:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- ASCII characters are being written in single quotes
- decimal numbers are of the type Long with a L suffix
- hex values have a x prefix&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, let me quote the documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;binascii.b2a_hex(data) binascii.hexlify(data) Return the hexadecimal representation of the binary data. Every byte of data is converted into the corresponding 2-digit hex representation. The resulting string is therefore twice as long as the length of data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;binascii.a2b_hex(hexstr) binascii.unhexlify(hexstr) Return the binary data represented by the hexadecimal string hexstr. This function is the inverse of b2a_hex(). hexstr must contain an even number of hexadecimal digits (which can be upper or lower case), otherwise a TypeError is raised.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I’ll begin with &lt;code&gt;hexlify()&lt;/code&gt;. As the documentation states, this method splits a string which consists of hex-tuples into distinct bytes.&lt;/p&gt;
&lt;p&gt;The ASCII character ‘A’ has 65L as numerical representation. To verify this in Python:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb2-1" title="1"&gt;&lt;span class="bu"&gt;long&lt;/span&gt;(&lt;span class="bu"&gt;ord&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;))&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" title="2"&gt;65L&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You might ask “Why is this even relevant to understand binascii?” Well, we don’t know anything about how ord() does its job. But with binascii we can re-calculate manually and verify.&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb3-1" title="1"&gt;binascii.hexlify(&lt;span class="st"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" title="2"&gt;&lt;span class="co"&gt;&amp;#39;41&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we know that an ‘A’ – interpreted as binary data and shown in hex – resembles ’41’. But wait, ’41’ is a string and no hex value! That’s no biggy, &lt;code&gt;hexlify()&lt;/code&gt; represents its result as string.&lt;/p&gt;
&lt;p&gt;To stay with the example, let’s convert 41 into a decimal number and check if it equals 65L.&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb4-1" title="1"&gt;&lt;span class="bu"&gt;long&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;41&amp;#39;&lt;/span&gt;, &lt;span class="dv"&gt;16&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" title="2"&gt;65L&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tada! It seems that ‘A’ = 41 = 65L. You might have known that already, but please, stay with me a minute longer.&lt;/p&gt;
&lt;p&gt;To make it look a little more complex:&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb5-1" title="1"&gt;binascii.hexlify(&lt;span class="st"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;) &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;&lt;/span&gt;&lt;span class="sc"&gt;%x&lt;/span&gt;&lt;span class="st"&gt;&amp;#39;&lt;/span&gt; &lt;span class="op"&gt;%&lt;/span&gt; &lt;span class="bu"&gt;long&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;41&amp;#39;&lt;/span&gt;, &lt;span class="dv"&gt;16&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" title="2"&gt;&lt;span class="va"&gt;True&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Be aware that &lt;code&gt;'%x' % n&lt;/code&gt; converts a decimal number &lt;code&gt;n&lt;/code&gt; into its hex representation.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;code&gt;binascii.unhexlify()&lt;/code&gt; naturally does the same thing as &lt;code&gt;hexlify()&lt;/code&gt;, but in reverse. It takes binary data and displays it in tuples of hex-values.&lt;/p&gt;
&lt;p&gt;I’ll start off with an example:&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb6-1" title="1"&gt;binascii.unhexlify(&lt;span class="st"&gt;&amp;#39;41&amp;#39;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-2" title="2"&gt;&lt;span class="co"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb7-1" title="1"&gt;binascii.unhexlify(&lt;span class="st"&gt;&amp;#39;&lt;/span&gt;&lt;span class="sc"&gt;%x&lt;/span&gt;&lt;span class="st"&gt;&amp;#39;&lt;/span&gt; &lt;span class="op"&gt;%&lt;/span&gt; &lt;span class="bu"&gt;ord&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;))&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" title="2"&gt;&lt;span class="co"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, &lt;code&gt;unhexlify()&lt;/code&gt; takes the numerical representation 65L from the ASCII character ‘A’&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb8-1" title="1"&gt;&lt;span class="bu"&gt;ord&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-2" title="2"&gt;&lt;span class="dv"&gt;65&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;converts it into hex 41&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb9-1" title="1"&gt;&lt;span class="co"&gt;&amp;#39;%x&amp;#39;&lt;/span&gt; &lt;span class="op"&gt;%&lt;/span&gt; &lt;span class="bu"&gt;ord&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-2" title="2"&gt;&lt;span class="co"&gt;&amp;#39;41&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and represents it as a 1-tuple (meaning dimension of one) of hex values.&lt;/p&gt;
&lt;p&gt;And now the conclusio – why might all of this be useful? Right now, I can think of at least four use cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cryptography&lt;/li&gt;
&lt;li&gt;data-transformation (i.e. Base64 for MIME/E-Mail attachments)&lt;/li&gt;
&lt;li&gt;security (deciphering binary readings off a network, pattern matching, …)&lt;/li&gt;
&lt;li&gt;textual representation of escape sequences&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Taking up the last example, I’ll show you how to visualize the Bell escape sequence (you know, that thing that keeps beeping in your terminal). Taken from the ASCII table, the numerical representation of the Bell is 7. Programmers might know it better as &lt;code&gt;\a&lt;/code&gt;.&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb10-1" title="1"&gt;&lt;span class="bu"&gt;ord&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;&lt;/span&gt;&lt;span class="ch"&gt;\a&lt;/span&gt;&lt;span class="st"&gt;&amp;#39;&lt;/span&gt;) &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="dv"&gt;7&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" title="2"&gt;&lt;span class="va"&gt;True&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Presuming you read such a character in some kind of binary data – for example from a socket and you want to visualize this data with &lt;code&gt;print&lt;/code&gt;, you will not get any results – at least none visible. You might hear the Bell sound if you’re not on a silent terminal.&lt;/p&gt;
&lt;p&gt;Now, finally – binascii to the rescue:&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb11-1" title="1"&gt;binascii.hexlify(&lt;span class="st"&gt;&amp;#39;&lt;/span&gt;&lt;span class="ch"&gt;\a&lt;/span&gt;&lt;span class="st"&gt;&amp;#39;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-2" title="2"&gt;&lt;span class="co"&gt;&amp;#39;07&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Voilà, the dubious string is decrypted.&lt;/p&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/python.html"&gt;python&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/python.html"&gt;#python&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="python"></category></entry><entry><id>urn:uuid:dbae6bba-fd00-4cbe-94e7-e8df800489c1</id><title>VIM as Python IDE</title><link href="https://200ok.ch/posts/vim-as-python-ide.html" type="text/html" title="VIM as Python IDE" rel="alternate"></link><published>2009-05-24T00:00:00Z</published><updated>2009-05-24T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/vim-as-python-ide.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;VIM as Python IDE - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="VIM as Python IDE - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/vim-as-python-ide.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="VIM as Python IDE - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/vim-as-python-ide.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/vim-as-python-ide.html" itemprop="url"&gt;VIM as Python IDE&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2009-05-24&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;1095&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;6&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Alain M. Lafon&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;Update: This is a re-post of an older blog post of mine. Originally it was posted on my &lt;a href="http://blog.dispatched.ch/2009/05/24/vim-as-python-ide/"&gt;personal blog&lt;/a&gt; where it has &amp;gt;130 comments and ~ 250’000 views over the last years. I’m deprecating my personal blog in favor of this 200OK blog.&lt;/p&gt;
&lt;p&gt;Finding the perfect IDE for Python isn’t an easy feat. There are a great many to chose from, but even though some of them offer really nifty features, I can’t help myself but feel attracted to VIM anyway. I feel that no IDE accomplishes the task of giving the comfort of complete power over the code – something is always missing out. This is why I always come back to using IDLE and VIM. Those two seem to be best companions when doing some quick and agile hacking – but when it comes to managing bigger and longer term projects, this combo needs some tweaking. But when it’s done, VIM will be a powerful IDE for Python – including code completion(with pydoc display), graphical debugging, task-management and a project view.&lt;/p&gt;
&lt;p&gt;This is where we are going:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/img/vim-as-python-ide/vim-as-python-ide.png" alt="VIM as Python IDE" /&gt;&lt;figcaption&gt;VIM as Python IDE&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;So, these are my thoughts on a VIM setup for coding (Python).&lt;/p&gt;
&lt;p&gt;Modern GUI VIM implementations like GVIM or MacVIM give the user the opportunity to organize their open files in tabs. This might look convenient, but to me it is rather bad practice, because a second tab will not be in the in the same buffer scope as the first one which takes away from future interaction options between the two. Using MiniBufExplorer, however, gives the user tabs(not only in the GUI, but also in command line) and leaves the classic buffer interaction intact.&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/img/vim-as-python-ide/minibuf.png" alt="VIM MiniBufExplorer" /&gt;&lt;figcaption&gt;VIM MiniBufExplorer&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Being able to neatly work on multiple files, the user still misses the potential his favourite IDE gives him in visualizing classes, functions and variables. Luckily there are quite a few plugins around to accomplish this task just as well. My favourite one would be TagList. TagList uses Exuberant Ctags for actually generating the tags(note: it really relies on this specific version of ctags – preinstalled implementations on UNIX systems won’t work).&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/img/vim-as-python-ide/taglist.png" alt="VIM Exuberant Ctags TagList" /&gt;&lt;figcaption&gt;VIM Exuberant Ctags TagList&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;A lot of coders have the habit of using TODO or FIXME statements in their code. Other IDEs often rely on having good third party project management software, but not VIM. There are great plugins like Tasklist reminding the programmer of those lines of code. Tasklist even implements custom lists – to me that’s an incredible productivity gain.&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/img/vim-as-python-ide/tasklist.png" alt="VIM Tasklist" /&gt;&lt;figcaption&gt;VIM Tasklist&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In these times, the programmer knows his or her programming language more or less by interactively finding out what it can do. Therefore code completion(sometimes also called IntelliSense&lt;em&gt;ugh&lt;/em&gt;) is a major feature. I have heard many people saying that this is where VIM fails – but luckily they are plain wrong(; In V7, VIM introduced omni completion – given it is configured to recognize Python (if not, this feature is only a plugin away) Ctrl+x Ctrl+o opens a drop down dialog like any other IDE – even the whole Pydoc gets to be displayed in a split window.&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/img/vim-as-python-ide/omnicompletion.png" alt="VIM Omnicompletion" /&gt;&lt;figcaption&gt;VIM Omnicompletion&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Probably the most wanted feature(besides code completion) is debugging graphically. VimPDB is a plugin that lets you do just that(. I acknowledge it is no complete substitution for a full fledged graphical debugger, but I honour the thought that having to rely on a debugger (often), is a hint of bad design.&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/img/vim-as-python-ide/vimpdb.png" alt="VIM Debugger VimPDB" /&gt;&lt;figcaption&gt;VIM Debugger VimPDB&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;From the eye-candy to the implementation. Don’t worry, it’s no sorcery.&lt;/p&gt;
&lt;p&gt;First of all, make sure you have VIM version &amp;gt;=7.x installed, compiled with Python support. To check for the second, enter :python print “hello, world” into VIM. If you see an error message like “E319: Sorry, the command is not available in this version”, then it’s time to get a new one. If you’re on a Mac, just install MacVIM(there’s also a binary for the console in /Applications/MacVim.app/Contents/MacOS/). If you’re on Windows, GVIM will suffice(for versions != 2.4 search for the right plugin). If you’re on any other machine, you will probably know how to compile your very own VIM with Python support.&lt;/p&gt;
&lt;p&gt;Second, check if you have a plugin directory. In Unix it would typically be located in $HOME/.vim/plugin, in Windows in the Program Files directory. If it doesn’t exist, create it.&lt;/p&gt;
&lt;p&gt;In this Blog Post, I’ll show you how to manually install these plugins. Of course, there is other options like using the wonderful Pathogen of Tim Pope, or using the VIM8 plugin methodology.&lt;/p&gt;
&lt;p&gt;Now, let’s start with the MiniBufExplorer. &lt;a href="https://github.com/fholgado/minibufexpl.vim"&gt;Get&lt;/a&gt; it and copy it into your plugin directory. To start it automatically when needed and be able to use it with keyboard and mouse commands, append these lines in your vimrc configuration:&lt;/p&gt;
&lt;pre class="vimrc"&gt;&lt;code&gt;let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For a project view, get &lt;a href="https://github.com/vim-scripts/taglist.vim"&gt;TagList&lt;/a&gt; and &lt;a href="http://ctags.sourceforge.net/"&gt;Exuberant Ctags&lt;/a&gt;. To install Ctags, unpack it, go into the directory and do a compile/install via:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb2-1" title="1"&gt;&lt;span class="ex"&gt;./configure&lt;/span&gt; &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="fu"&gt;sudo&lt;/span&gt; make install&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ctags will then be installed in &lt;code&gt;/usr/local/bin&lt;/code&gt;. When using a Windows machine, I recommend &lt;a href="http://cygwin.com/"&gt;Cygwin&lt;/a&gt; with GCC and Make; it’ll work just fine. If you don’t want to tamper with your original ctags installation, you can propagate the location to VIM by appending the following line to vimrc:&lt;/p&gt;
&lt;pre class="vimrc"&gt;&lt;code&gt;let $Tlist_Ctags_Cmd=&amp;#39;/usr/local/bin/ctags&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To install TagList, just drop it into VIMs plugin directory. You will now be able to use the project view by typing the command &lt;code&gt;:TlistToggle&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.vim.org/scripts/script.php?script_id=2607"&gt;Tasklist&lt;/a&gt; is a simple plugin, too. Copying it into the plugin directory will suffice. I like to have shortcuts and have added&lt;/p&gt;
&lt;pre class="vimrc"&gt;&lt;code&gt;map T :TaskList&amp;lt;CR&amp;gt;
map P :TlistToggle&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to vimrc. Pressing &lt;code&gt;T&lt;/code&gt; will then open the TaskList if there are any tasks to process. &lt;code&gt;q&lt;/code&gt; quits the TaskList again.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/gotcha/vimpdb"&gt;VimPDB&lt;/a&gt; is a plugin, as well. Install as before and see the readme for documentation.&lt;/p&gt;
&lt;p&gt;To enable code(omni) completion, add this line to your vimrc:&lt;/p&gt;
&lt;pre class="vimrc"&gt;&lt;code&gt;autocmd FileType python set omnifunc=pythoncomplete#Complete&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If it doesn’t work then, you’ll need this &lt;a href="http://www.vim.org/scripts/script.php?script_id=1542"&gt;plugin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My last two recommondations are setting these lines to comply to &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP 8&lt;/a&gt;(Pythons’ style guide) and to have decent eye candy:&lt;/p&gt;
&lt;pre class="vimrc"&gt;&lt;code&gt;set expandtab
set textwidth=79
set tabstop=8
set softtabstop=4
set shiftwidth=4
set autoindent
:syntax on&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are certainly a lot more flags to help productivity, but those will probably be more user specific.&lt;/p&gt;
&lt;p&gt;Have fun coding Python while not being bound to a specific IDE, but having all the benefits of VIM bundled with a few helping hands. Enjoy, everyone.&lt;/p&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/vim.html"&gt;vim&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/coding.html"&gt;#coding&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/ctags.html"&gt;#ctags&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/exuberant_ctags.html"&gt;#exuberant_ctags&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/minibuf.html"&gt;#minibuf&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/omni_completion.html"&gt;#omni_completion&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/pep_8.html"&gt;#pep_8&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/programming.html"&gt;#programming&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/python.html"&gt;#python&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/python_ide.html"&gt;#python_ide&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/taglist.html"&gt;#taglist&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/tasklist.html"&gt;#tasklist&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/tutorial.html"&gt;#tutorial&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/vi.html"&gt;#vi&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/vimpdb.html"&gt;#vimpdb&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/walkthrough.html"&gt;#walkthrough&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="coding"></category><category term="ctags"></category><category term="exuberant_ctags"></category><category term="minibuf"></category><category term="omni_completion"></category><category term="pep_8"></category><category term="programming"></category><category term="python"></category><category term="python_ide"></category><category term="taglist"></category><category term="tasklist"></category><category term="tutorial"></category><category term="vi"></category><category term="vimpdb"></category><category term="walkthrough"></category></entry><entry><id>urn:uuid:0881dac9-3437-48d0-b2a2-fc6ffe653da4</id><title>Webscraping with Python and BeautifulSoup</title><link href="https://200ok.ch/posts/webscraping-with-python-and-beautifulsoup.html" type="text/html" title="Webscraping with Python and BeautifulSoup" rel="alternate"></link><published>2009-03-15T00:00:00Z</published><updated>2009-03-15T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/webscraping-with-python-and-beautifulsoup.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;Webscraping with Python and BeautifulSoup - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="Webscraping with Python and BeautifulSoup - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/webscraping-with-python-and-beautifulsoup.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="Webscraping with Python and BeautifulSoup - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/webscraping-with-python-and-beautifulsoup.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/webscraping-with-python-and-beautifulsoup.html" itemprop="url"&gt;Webscraping with Python and BeautifulSoup&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2009-03-15&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;1116&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;9&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Alain M. Lafon&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;Update: This is a re-post of an older blog post of mine. Originally it was posted on my &lt;a href="http://blog.dispatched.ch/"&gt;personal blog&lt;/a&gt; where it has ~40 comments and &amp;gt;35’000 views over the last years. I’m deprecating my personal blog in favor of this 200OK blog.&lt;/p&gt;
&lt;p&gt;In this short tutorial, I’m going to show you how to scrape a website with the 3rd party html-parsing module &lt;a href="https://www.crummy.com/software/BeautifulSoup/"&gt;BeautifulSoup&lt;/a&gt; in a practical example. We will search the wonderful translation engine &lt;a href="http://www.dict.cc/"&gt;dict.cc&lt;/a&gt;, which holds the key to over 700k translations from English to German and vice versa. Note that BeautifulSoup is &lt;a href="http://www.crummy.com/software/BeautifulSoup/#Download"&gt;licensed&lt;/a&gt; just like Python while dict.cc allows for &lt;a href="http://www.dict.cc/?s=about%3Afaq#faq15"&gt;external searching&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, place BeautifulSoup.py in your modules directory. Alternatively, if you just want to do a quick test, put in the same directory where you will be writing your program. Then start your favourite text editor/Python IDE(for quick prototyping like we are about to do, I highly recommend a combination of IDLE and &lt;a href="/posts/vim-as-python-ide.html"&gt;VIM&lt;/a&gt;) and begin coding. In this tutorial we won’t be doing any design; we won’t even encapsulate in a class. How to do that, later on, is up to your needs.&lt;/p&gt;
&lt;p&gt;What we will do:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;go to dict.cc&lt;/li&gt;
&lt;li&gt;enter a search word into the webform&lt;/li&gt;
&lt;li&gt;submit the form&lt;/li&gt;
&lt;li&gt;read the result&lt;/li&gt;
&lt;li&gt;parse the html code&lt;/li&gt;
&lt;li&gt;save all translations&lt;/li&gt;
&lt;li&gt;print them&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All required code is embedded in this post. At &lt;a
href="#complete_code"&gt;the bottom&lt;/a&gt;, you will find the complete code in one snippet.&lt;/p&gt;
&lt;p&gt;Now, let the magic begin. Those are the required imports.&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb1-1" title="1"&gt;&lt;span class="im"&gt;import&lt;/span&gt; urllib&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" title="2"&gt;&lt;span class="im"&gt;import&lt;/span&gt; urllib2&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" title="3"&gt;&lt;span class="im"&gt;import&lt;/span&gt; string&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" title="4"&gt;&lt;span class="im"&gt;import&lt;/span&gt; sys&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" title="5"&gt;&lt;span class="im"&gt;from&lt;/span&gt; BeautifulSoup &lt;span class="im"&gt;import&lt;/span&gt; BeautifulSoup&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://docs.python.org/library/urllib.html"&gt;urllib&lt;/a&gt; and &lt;a href="http://docs.python.org/library/urllib2.html"&gt;urllib2&lt;/a&gt; are both modules offering the possibility to read data from various URLs; they will be needed to open the connection and retrieve the website. BeautifulSoup is, as mentioned, a html parser.&lt;/p&gt;
&lt;p&gt;Since we are going to fetch our data from a website, we have to behave like a browser. That’s why will be needing to fake a &lt;a href="http://de.wikipedia.org/wiki/User_Agent"&gt;user agent&lt;/a&gt;. For our program, I chose to push the webstatistics a little in favour of Firefox and Solaris.&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb2-1" title="1"&gt;user_agent &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Mozilla/5 (Solaris 10) Gecko&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" title="2"&gt;headers &lt;span class="op"&gt;=&lt;/span&gt; { &lt;span class="st"&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt; : user_agent }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let’s take a look at the code of dict.cc. We need to know how the form is constructed if we want to query it.&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode html"&gt;&lt;code class="sourceCode html"&gt;&lt;a class="sourceLine" id="cb3-1" title="1"&gt;...&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" title="2"&gt;&lt;span class="kw"&gt;&amp;lt;form&lt;/span&gt;&lt;span class="ot"&gt; style=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;margin:0px&amp;quot;&lt;/span&gt;&lt;span class="ot"&gt; action=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;http://www.dict.cc/&amp;quot;&lt;/span&gt;&lt;span class="ot"&gt; method=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;get&amp;quot;&lt;/span&gt;&lt;span class="kw"&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" title="3"&gt;  &lt;span class="kw"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" title="4"&gt;    &lt;span class="kw"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-5" title="5"&gt;      &lt;span class="kw"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-6" title="6"&gt;        &lt;span class="kw"&gt;&amp;lt;input&lt;/span&gt;&lt;span class="ot"&gt; id=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;sinp&amp;quot;&lt;/span&gt;&lt;span class="ot"&gt; maxlength=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;100&amp;quot;&lt;/span&gt;&lt;span class="ot"&gt; name=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class="ot"&gt; size=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;25&amp;quot;&lt;/span&gt;&lt;span class="ot"&gt; type=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="kw"&gt;/&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-7" title="7"&gt;        style=&amp;quot;padding:2px;width:340px&amp;quot; value=&amp;quot;&amp;quot;&amp;gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-8" title="8"&gt;      ...&lt;span class="kw"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-9" title="9"&gt;    &lt;span class="kw"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-10" title="10"&gt;  &lt;span class="kw"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-11" title="11"&gt;&lt;span class="kw"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-12" title="12"&gt;...&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The relevant parts are &lt;code&gt;action&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt; and the &lt;code&gt;name&lt;/code&gt; inside the input tag. The action is the web application that will get called when the form is submitted. The method shows us how we need to encode the data for the form while the &lt;code&gt;name&lt;/code&gt; is our &lt;code&gt;query&lt;/code&gt; variable.&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb4-1" title="1"&gt;values &lt;span class="op"&gt;=&lt;/span&gt; {&lt;span class="st"&gt;&amp;#39;s&amp;#39;&lt;/span&gt; : sys.argv[&lt;span class="dv"&gt;1&lt;/span&gt;] }&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" title="2"&gt;data &lt;span class="op"&gt;=&lt;/span&gt; urllib.urlencode(values)&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-3" title="3"&gt;request &lt;span class="op"&gt;=&lt;/span&gt; urllib2.Request(&lt;span class="st"&gt;&amp;quot;http://www.dict.cc/&amp;quot;&lt;/span&gt;, data, headers)&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-4" title="4"&gt;response &lt;span class="op"&gt;=&lt;/span&gt; urllib2.urlopen(request)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here the data get’s encapsulated in a &lt;a href="http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol"&gt;GET&lt;/a&gt; request and packed into the form. Notice that &lt;code&gt;values&lt;/code&gt; is a dictionary which makes handling more complex forms a charm. The form gets submitted by &lt;code&gt;urlopen()&lt;/code&gt; – i.e. we virtually pressed the “Search”-button. See how easy it is? These are only a couple lines of code, but we already have searched on dict.cc for a completely arbitrary word from the command line. The &lt;code&gt;response&lt;/code&gt; has also been retrieved. All that is left, is to extract the relevant information.&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb5-1" title="1"&gt;the_page &lt;span class="op"&gt;=&lt;/span&gt; response.read()&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" title="2"&gt;pool &lt;span class="op"&gt;=&lt;/span&gt; BeautifulSoup(the_page)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;response&lt;/code&gt; is read and saved into regular html code. This code could now be analyzed via regular &lt;code&gt;string.find()&lt;/code&gt; or &lt;code&gt;re.findall()&lt;/code&gt; methods, but this implies hard-coding in reference to a lot of the underlying logic of the page. Besides, it would require a lot reverse engineering of the positional parameters, setting up several potentially recursive methods. This would ultimately produce ugly(i.e. not very pythonic) code. Lucky for us, there already is a full fledged html parser which allows us to ask just about any generic question. Let’s take a look at the resulting html code, first. If you are not yet familar with the tool that can be seen in the screenshot; I’m using Firefox with the &lt;a href="https://addons.mozilla.org/de/firefox/addon/1843"&gt;Firebug&lt;/a&gt; addon. This one is very helpful if you ever need to debug a website.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/webscraping-with-python/firefox-firebug.png" /&gt;&lt;/p&gt;
&lt;p&gt;Let me show an excerpt of the code.&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb6-1" title="1"&gt;&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;table&lt;span class="op"&gt;&amp;gt;&lt;/span&gt;..&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-2" title="2"&gt;  &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;td &lt;span class="kw"&gt;class&lt;/span&gt;&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;td7nl&amp;quot;&lt;/span&gt; style&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;background-color: rgb(233, 233, 233);&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-3" title="3"&gt;    &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;a href&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;/englisch-deutsch/web.html&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-4" title="4"&gt;      &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;b&lt;span class="op"&gt;&amp;gt;&lt;/span&gt;web&lt;span class="op"&gt;&amp;lt;/&lt;/span&gt;b&lt;span class="op"&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-5" title="5"&gt;    &lt;span class="op"&gt;&amp;lt;/&lt;/span&gt;a&lt;span class="op"&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-6" title="6"&gt;  &lt;span class="op"&gt;&amp;lt;/&lt;/span&gt;td&lt;span class="op"&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-7" title="7"&gt;&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;td &lt;span class="kw"&gt;class&lt;/span&gt;&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;td7nl&amp;quot;&lt;/span&gt; ... &lt;span class="op"&gt;/&lt;/span&gt;td&lt;span class="op"&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-8" title="8"&gt;&lt;span class="op"&gt;&amp;lt;/&lt;/span&gt;table&lt;span class="op"&gt;&amp;gt;&lt;/span&gt;..&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The results are displayed in a table. The two interesting columns share the class &lt;code&gt;td7nl&lt;/code&gt;. The most efficient way would seem to just sweep all the data from inside the cells of these two columns. Fortunately for us, BeautifulSoup implemented just that feature.&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;a class="sourceLine" id="cb7-1" title="1"&gt;results &lt;span class="op"&gt;=&lt;/span&gt; pool.findAll(&lt;span class="st"&gt;&amp;#39;td&amp;#39;&lt;/span&gt;, attrs&lt;span class="op"&gt;=&lt;/span&gt;{&lt;span class="st"&gt;&amp;#39;class&amp;#39;&lt;/span&gt; : &lt;span class="st"&gt;&amp;#39;td7nl&amp;#39;&lt;/span&gt;})&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" title="2"&gt;source &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" title="3"&gt;translations &lt;span class="op"&gt;=&lt;/span&gt; []&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-4" title="4"&gt; &lt;/a&gt;
&lt;a class="sourceLine" id="cb7-5" title="5"&gt;&lt;span class="cf"&gt;for&lt;/span&gt; result &lt;span class="kw"&gt;in&lt;/span&gt; results:&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-6" title="6"&gt;    word &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-7" title="7"&gt;    &lt;span class="cf"&gt;for&lt;/span&gt; tmp &lt;span class="kw"&gt;in&lt;/span&gt; result.findAll(text&lt;span class="op"&gt;=&lt;/span&gt;&lt;span class="va"&gt;True&lt;/span&gt;):&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-8" title="8"&gt;        word &lt;span class="op"&gt;=&lt;/span&gt; word &lt;span class="op"&gt;+&lt;/span&gt; &lt;span class="st"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="op"&gt;+&lt;/span&gt; &lt;span class="bu"&gt;unicode&lt;/span&gt;(tmp).encode(&lt;span class="st"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-9" title="9"&gt;    &lt;span class="cf"&gt;if&lt;/span&gt; source &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;&amp;#39;&lt;/span&gt;:&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-10" title="10"&gt;        source &lt;span class="op"&gt;=&lt;/span&gt; word&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-11" title="11"&gt;    &lt;span class="cf"&gt;else&lt;/span&gt;:&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-12" title="12"&gt;        translations.append((source, word))&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-13" title="13"&gt; &lt;/a&gt;
&lt;a class="sourceLine" id="cb7-14" title="14"&gt;&lt;span class="cf"&gt;for&lt;/span&gt; translation &lt;span class="kw"&gt;in&lt;/span&gt; translations:&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-15" title="15"&gt;    &lt;span class="bu"&gt;print&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&lt;/span&gt;&lt;span class="sc"&gt;%s&lt;/span&gt;&lt;span class="st"&gt; =&amp;gt; &lt;/span&gt;&lt;span class="sc"&gt;%s&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;%&lt;/span&gt; (translation[&lt;span class="dv"&gt;0&lt;/span&gt;], translation[&lt;span class="dv"&gt;1&lt;/span&gt;])&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;results&lt;/code&gt; will be a &lt;code&gt;BeautifulSoup.ResultSet&lt;/code&gt;. Each member of the tuple is the HTML code of one column of the class &lt;code&gt;td7nl&lt;/code&gt;. Notice that you can access each element like you would expect in a tuple. &lt;code&gt;result.findAll(text=True)&lt;/code&gt; will return each embedded textual element of the table. All we have to do is merge the different tags together. &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;word&lt;/code&gt; are temporary variables that will hold one translation in each iteration. Each translation will be saved as a pair(list) inside the &lt;code&gt;translations&lt;/code&gt; tuple. Finally we iterate over the found translations and write them to the screen.&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ python webscraping_demo.py
 kinky   {adj} =&amp;gt;  9 kraus   [Haar]  
 kinky   {adj} =&amp;gt;  nappy   {adj}   [Am.]
 kinky   {adj} =&amp;gt;  6 kraus   [Haar]  
 kinky   {adj} =&amp;gt;  crinkly   {adj}
 kinky   {adj} =&amp;gt;  kraus  
 kinky   {adj} =&amp;gt;  curly   {adj}
 kinky   {adj} =&amp;gt;  kraus  
 kinky   {adj} =&amp;gt;  frizzily   {adv}
 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In a regular application those results would need a little lexing, of course. The most important thing, however, is that we just wrote a translation wrapper onto a web application – in only 28 lines of code.&lt;/p&gt;
&lt;div id="complete_code"&gt;
&lt;h4&gt;
Complete code
&lt;/h4&gt;
&lt;pre&gt; &lt;code class="hljs shell python"&gt;import urllib
import urllib2
import string
import sys
from BeautifulSoup import BeautifulSoup
user_agent = 'Mozilla/5 (Solaris 10) Gecko'
headers = { 'User-Agent' : user_agent }
values = {'s' : sys.argv[1] }
data = urllib.urlencode(values)
request = urllib2.Request("http://www.dict.cc/", data, headers)
response = urllib2.urlopen(request)
the_page = response.read()
pool = BeautifulSoup(the_page)
results = pool.findAll('td', attrs={'class' : 'td7nl'})
source = ''
translations = []

for result in results:
    word = ''
    for tmp in result.findAll(text=True):
        word = word + " " + unicode(tmp).encode("utf-8")
    if source == '':
        source = word
    else:
        translations.append((source, word))

for translation in translations:
    print "%s =&gt; %s" % (translation[0], translation[1])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;All that is left is for me to recommend the &lt;a href="http://www.crummy.com/software/BeautifulSoup/documentation.html"&gt;BeautifulSoup documentation&lt;/a&gt;. What we did here really didn’t cover what this module is capable of.&lt;/p&gt;
&lt;p&gt;I wish you all the best.&lt;/p&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/python.html"&gt;python&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/beautifulsoup.html"&gt;#beautifulsoup&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/howto.html"&gt;#howto&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/scraping.html"&gt;#scraping&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/tutorial.html"&gt;#tutorial&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/web_scraping.html"&gt;#web_scraping&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/webscraping.html"&gt;#webscraping&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="beautifulsoup"></category><category term="howto"></category><category term="scraping"></category><category term="tutorial"></category><category term="web_scraping"></category><category term="webscraping"></category></entry></feed>