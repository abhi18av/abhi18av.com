<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>200ok - Consultancy, Research Lab, Incubator</title><subtitle>Consultancy - Research Lab - Incubator</subtitle><generator uri="https://perun.io/" version="0.4.3-SNAPSHOT">Perun</generator><link href="https://200ok.ch/" type="text/html"></link><link href="https://200ok.ch/atom-5.xml" rel="self"></link><link href="https://200ok.ch/atom.xml" rel="first"></link><link href="https://200ok.ch/atom-6.xml" rel="last"></link><link href="https://200ok.ch/atom-6.xml" rel="next"></link><link href="https://200ok.ch/atom-4.xml" rel="previous"></link><updated>2019-06-22T21:37:46Z</updated><id>https://200ok.ch/</id><author><name>200ok GmbH</name></author><entry><id>urn:uuid:1521b412-93f7-4c85-94ed-0da0dde984bc</id><title>Upgrade to Chromium 60 on Debian</title><link href="https://200ok.ch/posts/upgrade-to-chromium-60.html" type="text/html" title="Upgrade to Chromium 60 on Debian" rel="alternate"></link><published>2017-09-04T00:00:00Z</published><updated>2017-09-04T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/upgrade-to-chromium-60.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;Upgrade to Chromium 60 on Debian - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="Upgrade to Chromium 60 on Debian - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/upgrade-to-chromium-60.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="Upgrade to Chromium 60 on Debian - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/upgrade-to-chromium-60.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/upgrade-to-chromium-60.html" itemprop="url"&gt;Upgrade to Chromium 60 on Debian&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2017-09-04&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;116&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;1&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Alain M. Lafon&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;After upgrading to Chromium 60 on current Debian Testing you might find yourself with a huge UI if you are on a HiDPI device. The current Chromium version has a bug (see &lt;a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=871542"&gt;Debian tracker&lt;/a&gt;). The proposed solution is to run Chromium with a manual scale factor setting. On a 15" MBP Retina, using &lt;code&gt;chromium --force-device-scale-factor=1.5&lt;/code&gt; yields the same UI size that I was used to before the upgrade.&lt;/p&gt;
&lt;p&gt;Looking at the Chromium upstream bug tracker, this issue is solved since end of May. It’ll find it’s way to Debian, eventually. In the meantime the workaround works just as well.&lt;/p&gt;
&lt;p&gt;The exact package version where this behaviour has been observed is: 60.0.3112.78-1&lt;/p&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/debian.html"&gt;debian&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/debian.html"&gt;#debian&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/chromium.html"&gt;#chromium&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="debian"></category><category term="chromium"></category></entry><entry><id>urn:uuid:36acb87c-a6fb-4f53-88a3-1e1ae01f6c2d</id><title>Edit remote files with Emacs</title><link href="https://200ok.ch/posts/edit-remote-files-with-emacs.html" type="text/html" title="Edit remote files with Emacs" rel="alternate"></link><published>2017-08-23T00:00:00Z</published><updated>2017-08-23T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/edit-remote-files-with-emacs.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;Edit remote files with Emacs - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="Edit remote files with Emacs - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/edit-remote-files-with-emacs.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="Edit remote files with Emacs - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/edit-remote-files-with-emacs.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/edit-remote-files-with-emacs.html" itemprop="url"&gt;Edit remote files with Emacs&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2017-08-23&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;176&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;1&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Alain M. Lafon&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;&lt;code&gt;tramp-mode&lt;/code&gt; is great for editing files remotely, but sometimes having a shell and Emacs together on the same file can be invaluable.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eshell&lt;/code&gt; opens up a shell which is like a regular Unix shell, but is written completely in Elisp, so it’s built-in to Emacs and is completely portable. &lt;code&gt;eshell&lt;/code&gt; has many interesting properties, but let’s focus on editing files remotely.&lt;/p&gt;
&lt;p&gt;When in &lt;code&gt;eshell&lt;/code&gt;, it is possible to change the working directory into a remote directory with the same syntax as &lt;code&gt;tramp-mode&lt;/code&gt;. Yes, no manual ssh-ing to the remote machine, it’s more like a fuse-sshfs connection, but without fuse and without the manual mounting!&lt;/p&gt;
&lt;p&gt;Changing to a remote directory is trivial:&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;~ $ cd /ssh:root@your-host.io:
/ssh:root@your-host.io:/root $&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From there, you can continue to use the shell, but you can also start to edit any file with &lt;code&gt;dired&lt;/code&gt;, &lt;code&gt;C-x C-f&lt;/code&gt; or &lt;code&gt;find-file&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Apart from that it feels pretty much like a mount point to which you can copy files from and to and so forth.&lt;/p&gt;
&lt;p&gt;It’s magic!&lt;/p&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/emacs.html"&gt;Emacs&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/emacs.html"&gt;#emacs&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/eshell.html"&gt;#eshell&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="emacs"></category><category term="eshell"></category></entry><entry><id>urn:uuid:ad9e6d0b-f374-42cb-b9d9-5a6ca247ffae</id><title>Search for recently updated files on Amazon S3</title><link href="https://200ok.ch/posts/search-for-recent-files-on-s3.html" type="text/html" title="Search for recently updated files on Amazon S3" rel="alternate"></link><published>2017-04-11T00:00:00Z</published><updated>2017-04-11T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/search-for-recent-files-on-s3.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;Search for recently updated files on Amazon S3 - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="Search for recently updated files on Amazon S3 - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/search-for-recent-files-on-s3.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="Search for recently updated files on Amazon S3 - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/search-for-recent-files-on-s3.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/search-for-recent-files-on-s3.html" itemprop="url"&gt;Search for recently updated files on Amazon S3&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2017-04-11&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;360&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;2&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Alain M. Lafon&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;Amazon AWS has a nice &lt;a href="http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html"&gt;command line client&lt;/a&gt; for their public cloud. This client is very well suited for automating tasks in many IaaS DevOps scenarios. However, it can also be used by a person. The scenarios to do so might be different than for automation, though.&lt;/p&gt;
&lt;p&gt;A common scenario for looking into S3 is to want to list files ordered by date and including metadata. On a Unix machine, this would be an &lt;code&gt;ls -lt&lt;/code&gt;. If it’s a very long list of files, you might want to cap the list - which again is very easy to achieve, for example with &lt;code&gt;ls -lt | head -n 10&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Those two things are easy on a Unix machine, but not so straight forward on Amazon S3. Amazon does have an &lt;code&gt;ls&lt;/code&gt; command which will list all files within &lt;code&gt;[BUCKET]&lt;/code&gt;:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb1-1" title="1"&gt;&lt;span class="ex"&gt;aws&lt;/span&gt; s3 ls s3://[BUCKET]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is totally feasible to pipe the result of this command into &lt;code&gt;head -n X&lt;/code&gt;. It does have serious drawbacks, though, because you might have &lt;em&gt;a lot&lt;/em&gt; of files on S3:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;You will first request all files over the network which will take a while and then remove most of them. Waiting for lots of irrelevant data to come over the wire is not efficient use of your time.&lt;/li&gt;
&lt;li&gt;To list things actually does come with a &lt;a href="https://aws.amazon.com/s3/pricing/"&gt;price tag&lt;/a&gt; on S3! Meaning that if you have lots of data on S3 and you’re doing this a lot, then you will pay for data that you never use, but discard. This might not be a lot of money depending on how many requests you have to do, but still.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Next to &lt;code&gt;aws s3&lt;/code&gt;, which only implements the most high level features such as &lt;code&gt;cp&lt;/code&gt; and &lt;code&gt;mv&lt;/code&gt;, there is a more powerful API &lt;a href="http://docs.aws.amazon.com/cli/latest/reference/s3api/index.html#cli-aws-s3api"&gt;&lt;code&gt;aws s3api&lt;/code&gt;&lt;/a&gt;. With this API you can write queries &lt;em&gt;and&lt;/em&gt; limit the amount of objects returned. Queries can include the &lt;code&gt;LastModified&lt;/code&gt; timestamp. Limiting on this timestamp is not the same as ordering by time (as in &lt;code&gt;ls -lt&lt;/code&gt;), but it’s the closest you will get to this functionality on S3.&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb2-1" title="1"&gt;&lt;span class="ex"&gt;aws&lt;/span&gt; s3api list-objects \&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" title="2"&gt;--bucket &lt;span class="st"&gt;&amp;quot;[BUCKET]&amp;quot;&lt;/span&gt; \&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" title="3"&gt;--query &lt;span class="st"&gt;&amp;#39;Contents[?LastModified&amp;gt;=`2017-04-10`][].{Key: Key, Size:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" title="4"&gt;&lt;span class="st"&gt;Size, LastModified: LastModified}&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/tooling.html"&gt;tooling&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/aws.html"&gt;#aws&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/cloud.html"&gt;#cloud&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/s3.html"&gt;#s3&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="aws"></category><category term="cloud"></category><category term="s3"></category></entry><entry><id>urn:uuid:35536858-81dd-467f-90e5-4c9f657569ea</id><title>Enable extensions for Chromium in Debian</title><link href="https://200ok.ch/posts/enable-extensions-for-chromium-in-debian.html" type="text/html" title="Enable extensions for Chromium in Debian" rel="alternate"></link><published>2017-04-04T00:00:00Z</published><updated>2017-04-04T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/enable-extensions-for-chromium-in-debian.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;Enable extensions for Chromium in Debian - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="Enable extensions for Chromium in Debian - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/enable-extensions-for-chromium-in-debian.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="Enable extensions for Chromium in Debian - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/enable-extensions-for-chromium-in-debian.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/enable-extensions-for-chromium-in-debian.html" itemprop="url"&gt;Enable extensions for Chromium in Debian&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2017-04-04&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;147&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;1&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Alain M. Lafon&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;If you happen to upgrade your Debian Jessie to Stretch (currently Debian Testing), one of the things you might want to patch is the default behavior of Chromium having extensions disabled by default. There’s no way to fix that in the UI, it has to be done by setting a global configuration flag.&lt;/p&gt;
&lt;p&gt;There’s also a reason why extensions are disabled by default. Apparently Chromium started downloading binary extensions that don’t show in the extensions list which had access to the Google Voice API which sounds kinda scary. Well, maybe it is, maybe it isn’t.&lt;/p&gt;
&lt;p&gt;However, if you decide you can’t live without extensions in Chromium, this is how you fix it:&lt;/p&gt;
&lt;p&gt;Set this global config flag in &lt;code&gt;/etc/environment&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export CHROMIUM_FLAGS=&amp;#39;--enable-remote-extensions&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More background information on why this is the new default:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=786909&lt;/li&gt;
&lt;li&gt;https://news.ycombinator.com/item?id=9724409&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/debian.html"&gt;debian&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/debian.html"&gt;#debian&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/chromium.html"&gt;#chromium&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="debian"></category><category term="chromium"></category></entry><entry><id>urn:uuid:54aed99c-4003-4a6b-aa5f-c56fbdd7fe2a</id><title>Coders Tip: Commit and push at at least at the end of the day</title><link href="https://200ok.ch/posts/coders-tip-commit-at-the-end-of-the-day.html" type="text/html" title="Coders Tip: Commit and push at at least at the end of the day" rel="alternate"></link><published>2017-04-02T00:00:00Z</published><updated>2017-04-02T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/coders-tip-commit-at-the-end-of-the-day.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;Coders Tip: Commit and push at at least at the end of the day - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="Coders Tip: Commit and push at at least at the end of the day - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/coders-tip-commit-at-the-end-of-the-day.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="Coders Tip: Commit and push at at least at the end of the day - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/coders-tip-commit-at-the-end-of-the-day.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/coders-tip-commit-at-the-end-of-the-day.html" itemprop="url"&gt;Coders Tip: Commit and push at at least at the end of the day&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2017-04-02&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;570&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;3&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Alain M. Lafon&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;Many programmers commit infrequently and their pushes are even rarer. There are multiple reasons for that - some programmers have a strong background in version control systems like SVN or even CVS (yes, both are still a thing in 2017) where branching and committing is expensive. Other programmers mention reasons in the range of “I’m not finished, yet” and won’t commit or push for days or weeks.&lt;/p&gt;
&lt;p&gt;If you are using a modern VCS like git or mercurial, then committing and branching is actually very cheap. With those, it is actually best practice to commit early and often. If you don’t want to commit “until you are done”, then your branch will only ever have one commit, because branches already are the barrier between different new features (see &lt;a
href="http://nvie.com/posts/a-successful-git-branching-model/"
target="_blank"&gt;A successful Git branching model&lt;/a&gt;). Instead, commit as early as you have finished part of a new feature like a test or an architecture stub.&lt;/p&gt;
&lt;p&gt;This will open up a treasure trove of potential good things for future you and other programmers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can go back in time and undo/re-do parts of what you have worked on.
&lt;ul&gt;
&lt;li&gt;This is incredibly useful - the depth of it will be understood when practiced regularly.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;When you open a &lt;a href="https://help.github.com/articles/about-pull-requests/"&gt;Pull Request&lt;/a&gt; on your branch for others to review, they can follow along your thought process and will gain a deeper understanding for your decisions.&lt;/li&gt;
&lt;li&gt;You will have created a backup of your state of mind that you can consult at any time without the complexities of holding new and old decisions in your head at the same time.&lt;/li&gt;
&lt;li&gt;Your future self will never have to start from an undocumented state of &lt;em&gt;something&lt;/em&gt; from your hard drive, but have a semantic last point of reference.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, do &lt;em&gt;push&lt;/em&gt; regularly whenever you have made a commit. This will also yield great potential:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It happens quite often that other developer will either depend or could improve upon your code. But they can’t as long as the code is not pushed.
&lt;ul&gt;
&lt;li&gt;Don’t worry about pushing features that aren’t &lt;em&gt;done&lt;/em&gt; yet. As long as you haven’t opened a Pull Request, it’s obvious that you are still working on it! However, other programmers can take a look at it if need be. This reason is pretty much about them. Don’t make assumptions on when the other team members could make use of your code. That’s their job. Yours is already hard enough without making future predictions about others(;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;In many projects you also will benefit of &lt;a href="https://martinfowler.com/articles/continuousIntegration.html"&gt;Continuous Integration (CI)&lt;/a&gt; running tests for you on a per commit basis if you regularly push. Depending on your project, it is not feasible to run the full test suite all the time on your machine. CI will help you with that - if you let it.&lt;/li&gt;
&lt;li&gt;By pushing, you move all your changes to another machine. With that, you have effectively made a backup! This means you will never lose work if you make this a habit. This is actually very important, because it is only a question of &lt;em&gt;when&lt;/em&gt; and not &lt;em&gt;if&lt;/em&gt; your machine breaks down in the future.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In conclusion, the coders tip: &lt;strong&gt;Make it a habit to commit and push whatever you have at the end of the day&lt;/strong&gt;. Even if you forgot to do it during the day, by making it a habit to commit and push at the end of the day, you will get a lot of the benefits.&lt;/p&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/coders tip.html"&gt;coders tip&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/programming.html"&gt;#programming&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/version control.html"&gt;#version control&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/git.html"&gt;#git&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="programming"></category><category term="version control"></category><category term="git"></category></entry><entry><id>urn:uuid:663b4876-7e0e-4da5-a30a-54ccc8ae709a</id><title>DSL resources for Ruby</title><link href="https://200ok.ch/posts/dsl-resources-for-ruby.html" type="text/html" title="DSL resources for Ruby" rel="alternate"></link><published>2016-12-10T00:00:00Z</published><updated>2016-12-10T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/dsl-resources-for-ruby.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;DSL resources for Ruby - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="DSL resources for Ruby - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/dsl-resources-for-ruby.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="DSL resources for Ruby - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/dsl-resources-for-ruby.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/dsl-resources-for-ruby.html" itemprop="url"&gt;DSL resources for Ruby&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2016-12-10&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;184&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;1&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Alain M. Lafon&lt;/span&gt;&lt;/section&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Phil Hofmann&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;This is nothing more than linked list of resources for learning how to write DSLs with Ruby, but also DSLs in general.&lt;/p&gt;
&lt;p&gt;(DSL stands for Domain Specific Language and which is a programming language that is closely modelled after the domain it is used in. &lt;a href="https://en.wikipedia.org/wiki/Domain-specific_language"&gt;Wikipedia&lt;/a&gt; has a good introductory article.)&lt;/p&gt;
&lt;p&gt;&lt;a href="http://obiefernandez.com/"&gt;&lt;strong&gt;Obie Fernandez&lt;/strong&gt;&lt;/a&gt; wrote the reference on Rails. In this podcast he speaks about what a DSL is, the difference between internal and external DSLs as well as the importance of the flexibly syntax of the host language in order to make DSLs worthwhile.&lt;/p&gt;
&lt;p&gt;http://podbay.fm/show/120906714/e/1175932332&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.martinfowler.com/"&gt;&lt;strong&gt;Martin Fowler&lt;/strong&gt;&lt;/a&gt; is a well known expert in Software Engineering specializing in patterns. In this podcast he talks with Rebecca Parsons about the definition of DSL, Internal vs. External DSLs, reasons to use DSLs and reasons not to and the DSL lifecycle.&lt;/p&gt;
&lt;p&gt;http://www.se-radio.net/2012/01/episode-182-domain-specific-languages-with-martin-fowler-and-rebecca-parsons/&lt;/p&gt;
&lt;p&gt;Last but not least, there is a Ruby library which let’s you map a DSL to your Ruby objects in a snap.&lt;/p&gt;
&lt;p&gt;https://ms-ati.github.io/docile/&lt;/p&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/ruby.html"&gt;ruby&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/ruby.html"&gt;#ruby&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/dsl.html"&gt;#dsl&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/programming.html"&gt;#programming&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="ruby"></category><category term="dsl"></category><category term="programming"></category></entry><entry><id>urn:uuid:e96d3d98-6312-4486-92c0-79008774e840</id><title>a prototype for a function generating macro in Clojure</title><link href="https://200ok.ch/posts/a-prototype-for-a-function-generating-macro-in-clojure.html" type="text/html" title="a prototype for a function generating macro in Clojure" rel="alternate"></link><published>2016-12-10T00:00:00Z</published><updated>2016-12-10T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/a-prototype-for-a-function-generating-macro-in-clojure.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;a prototype for a function generating macro in Clojure - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="a prototype for a function generating macro in Clojure - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/a-prototype-for-a-function-generating-macro-in-clojure.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="a prototype for a function generating macro in Clojure - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/a-prototype-for-a-function-generating-macro-in-clojure.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/a-prototype-for-a-function-generating-macro-in-clojure.html" itemprop="url"&gt;a prototype for a function generating macro in Clojure&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2016-12-10&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;444&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;3&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Phil Hofmann&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;TL;DR I was looking for a prototype of a Clojure macro that fulfills three requirements: (1) Generates a function. (2) Takes options as parameters and provides those to the generated function. (3) And lastly the generated function takes arguments. Spoiler! This is it…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(defmacro defsample [name &amp;amp; args]
  (let [options (apply hash-map args)]
    `(defn ~name [input#]
       (prn (str (:text ~options) &amp;quot; &amp;quot; input# &amp;quot;.&amp;quot;)))))

(defsample sample :text &amp;quot;Hello&amp;quot;)

(sample &amp;quot;world&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Keep on reading for a detailed description. In my quest to come up with the prototype above I started with the most basic version of a macro that generates a function.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;;; working, but boring

(defmacro defsample [name]
  `(defn ~name []
     (prn &amp;quot;Hello World.&amp;quot;)))

(defsample sample)

(sample)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The key elements of this macro being of course the Syntax Quote &lt;code&gt;`&lt;/code&gt; and the Syntax Unquote &lt;code&gt;~&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With a little modification the macro will take options and provide these to the generated function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;;; working, but still somewhat boring

(defmacro defsample [name &amp;amp; args]
  (let [options (apply hash-map args)]
    `(defn ~name []
       (prn (:text ~options)))))

(defsample example :text &amp;quot;Hello world.&amp;quot;)

(example)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, if we also want to pass in arguments to the generated function, the straight forward attempt will not work:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;;; defunkt!

(defmacro defsample [name]
  `(defn ~name [input]
     (prn input)))

(defsample sample)

(sample &amp;quot;Hello world.&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The reason that this does not work is, that in the example above the Syntax Quote &lt;code&gt;`&lt;/code&gt; will fully qualify all symbols within. But since qualified symbols cannot be used in the params of a &lt;code&gt;defn&lt;/code&gt; this will result in a&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CompilerException java.lang.RuntimeException: Can&amp;#39;t use qualified name as parameter&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So let’s replace the Syntax Quote with a regular Quote &lt;code&gt;'&lt;/code&gt; then…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;;; also defunkt!

(defmacro defsample [name]
  &amp;#39;(defn ~name [input]
     (prn input)))

(defsample sample)

(sample &amp;quot;Hello world.&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But, as you might have guessed, using a regular Quote instead of a Syntax Quote doesn’t help, because the Syntax Unquote will not work properly and thus result in a&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CompilerException java.lang.IllegalArgumentException: First argument to defn must be a symbol&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So instead of using a given symbol, which will be fully qualified by the Syntax Quote, we will have to use a generated symbol. This is anyway a good practice since it will prevent accidental naming collisions. In addition to the function &lt;code&gt;gen-sym&lt;/code&gt; which will generate such a generated symbol, there is also a short hand in form of a reader macro, that let’s us mark a symbol as to be replaced with a generated symbol. It works by appending a &lt;code&gt;#&lt;/code&gt; to the symbol.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;;; working and almost there...

(defmacro defsample [name]
  `(defn ~name [input#]
     (prn input#)))

(defsample sample)

(sample &amp;quot;Hello world.&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, combining this with the macro that took options and we finally arrive at the prototype that you saw in the first paragraph.&lt;/p&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/clojure.html"&gt;clojure&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/macro.html"&gt;#macro&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/metaprogramming.html"&gt;#metaprogramming&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/prototype.html"&gt;#prototype&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="macro"></category><category term="metaprogramming"></category><category term="prototype"></category></entry><entry><id>urn:uuid:9fa5731a-1d91-4cc9-a45b-b479a76a845d</id><title>Contextual helpers with zsh hooks</title><link href="https://200ok.ch/posts/contextual-helpers-with-zsh-hooks.html" type="text/html" title="Contextual helpers with zsh hooks" rel="alternate"></link><published>2016-12-09T00:00:00Z</published><updated>2016-12-09T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/contextual-helpers-with-zsh-hooks.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;Contextual helpers with zsh hooks - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="Contextual helpers with zsh hooks - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/contextual-helpers-with-zsh-hooks.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="Contextual helpers with zsh hooks - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/contextual-helpers-with-zsh-hooks.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/contextual-helpers-with-zsh-hooks.html" itemprop="url"&gt;Contextual helpers with zsh hooks&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2016-12-09&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;339&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;2&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Phil Hofmann&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;Back in the days when I was developing in Ruby most of my waking hours &lt;a href="http://rbenv.org/"&gt;rbenv&lt;/a&gt; was a real life saver. But looking at what it does, it initially felt awkward how it “wrapped” the &lt;code&gt;cd&lt;/code&gt; command. You could argue that the Ruby community are no strangers to guerrilla patching. But it felt less awkward when I learned that in my &lt;a href="http://zsh.org/"&gt;zsh&lt;/a&gt; it uses hooks instead of guerrilla patching to achieve the same goal: React on changing the directory.&lt;/p&gt;
&lt;p&gt;In the meantime I tried a couple of things with zsh hooks to optimize work flows and what not, but as it turns out, everything boiled down to one hook, and one hook only:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;autoload -U add-zsh-hook

# source .sourceme files
load-local-conf() {
  # check file exists, is regular file and is readable:
  if [[ -f .sourceme &amp;amp;&amp;amp; -r .sourceme ]]; then
    source .sourceme
  fi
}
add-zsh-hook chpwd load-local-conf&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The basic idea is: Directories naturally act like contexts, projects are structured in directories, the different concerns within a project could be structured by directories, and so on. If you store contextual functions, aliases, variables, or documentation - whatever you need on the console in the given context - in &lt;code&gt;.sourceme&lt;/code&gt; files, the hook above will automatically source the file once you enter that directory and you will have everything in there available.&lt;/p&gt;
&lt;p&gt;Here is a (rather contrived, but never the less pretty clear) example: Let’s say you have two projects that have images in a images directory. As new images come in you find yourself repeatedly call ImageMagick’s &lt;code&gt;mogrify&lt;/code&gt; command to reduce the images to a given size and each of the projects requires a specific image size. In the project’s &lt;code&gt;.sourceme&lt;/code&gt; you could define an alias&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;alias resize-images=&amp;#39;mogrify --geometry 100x images/*&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is your first contextual helper.&lt;/p&gt;
&lt;p&gt;Other examples are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Running &lt;code&gt;docker ps&lt;/code&gt; to make sure the required containers are running as I start working on a project.&lt;/li&gt;
&lt;li&gt;Running &lt;code&gt;cat &amp;lt;&amp;lt;EOF&lt;/code&gt; to display some project specific commands that I have trouble to remember.&lt;/li&gt;
&lt;li&gt;Setting environment variables with credentials.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/tricks.html"&gt;tricks&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/linux.html"&gt;#linux&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/console.html"&gt;#console&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/cli.html"&gt;#cli&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/terminal.html"&gt;#terminal&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/shell.html"&gt;#shell&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/zsh.html"&gt;#zsh&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="linux"></category><category term="console"></category><category term="cli"></category><category term="terminal"></category><category term="shell"></category><category term="zsh"></category></entry><entry><id>urn:uuid:105c9d69-08a0-4f37-9cbb-7d1f8c5513da</id><title>jq - my new favorite tool to work with json on the command line</title><link href="https://200ok.ch/posts/jq-my-new-favorite-tool-to-work-with-json-on-the-command-line.html" type="text/html" title="jq - my new favorite tool to work with json on the command line" rel="alternate"></link><published>2016-12-02T00:00:00Z</published><updated>2016-12-02T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/jq-my-new-favorite-tool-to-work-with-json-on-the-command-line.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;jq - my new favorite tool to work with json on the command line - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="jq - my new favorite tool to work with json on the command line - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/jq-my-new-favorite-tool-to-work-with-json-on-the-command-line.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="jq - my new favorite tool to work with json on the command line - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/jq-my-new-favorite-tool-to-work-with-json-on-the-command-line.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/jq-my-new-favorite-tool-to-work-with-json-on-the-command-line.html" itemprop="url"&gt;jq - my new favorite tool to work with json on the command line&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2016-12-02&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;389&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;3&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Phil Hofmann&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;Frustration with slow and manual processes is probably my number one motivator to discover new tooling. Having lately worked with Swagger on a Json API I found myself in need of a tool to work with Json on the command line.&lt;/p&gt;
&lt;p&gt;I tried a couple and just when I was about to make the decision that I want to try them all to find the best one my search was cut short when I tried &lt;a href="https://stedolan.github.io/jq/"&gt;jq&lt;/a&gt;. On the web site it claims: &lt;strong&gt;jq is like sed for JSON data&lt;/strong&gt;. And come to think of it what would we do without sed?&lt;/p&gt;
&lt;p&gt;And yes, it’s that good. Here two easy examples:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Extracting a field&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let’s say you access an API to retrieve an access key. Then that’s what it probably looks like.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -s -X PUT --header &amp;#39;Content-Type: application/json&amp;#39; \
  --header &amp;#39;Accept: application/json&amp;#39; \
  -d &amp;#39;{
    &amp;quot;email&amp;quot;: &amp;quot;your@email.address&amp;quot;,
    &amp;quot;password&amp;quot;: &amp;quot;swaggerrocks&amp;quot;
    }&amp;#39; \
  &amp;#39;https://your.api.endpoint/&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This of course will return a whole Json object.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&amp;quot;access&amp;quot;:&amp;quot;1234567890987654321&amp;quot;, &amp;quot;some&amp;quot;:&amp;quot;more&amp;quot;, &amp;quot;fields&amp;quot;:&amp;quot;you don&amp;#39;t care about&amp;quot;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But you might only be interested in the access key. Pipe it through jq.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -s -X PUT --header &amp;#39;Content-Type: application/json&amp;#39; \
  --header &amp;#39;Accept: application/json&amp;#39; \
  -d &amp;#39;{
    &amp;quot;email&amp;quot;: &amp;quot;your@email.address&amp;quot;,
    &amp;quot;password&amp;quot;: &amp;quot;swaggerrocks&amp;quot;
    }&amp;#39; \
  &amp;#39;https://your.api.endpoint/&amp;#39; | jq -r .access&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will print&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1234567890987654321&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Which in my setup is then piped into &lt;code&gt;xclip -i&lt;/code&gt; to copy it to X’s primary clipboard.) The &lt;code&gt;-r&lt;/code&gt; switch gives you the raw output instead of surrounding the resulting string with quotes.&lt;/p&gt;
&lt;p&gt;jq comes with its own mini language to define “filters” (more like transformers) to manipulate Json or extract data out of it.&lt;/p&gt;
&lt;p&gt;Since I now have a tool at hand to work with Json on the command line nicely. It suddenly bothers me that I’ve to pass carefully crafted literal Json into the curl earlier. Hence in a second example I will show how to use jq to generate Json.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Generate Json&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To generate Json we tell jq with the &lt;code&gt;-n&lt;/code&gt; switch to expect no input. We’ll then use filters to add our data.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jq -n &amp;#39;.email=&amp;quot;your@email.address&amp;quot;|.password=&amp;quot;swaggerrocks&amp;quot;&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using this technique we can refactor our command from earlier to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jq -n &amp;#39;.email=&amp;quot;your@email.address&amp;quot;|.password=&amp;quot;swaggerrocks&amp;quot;&amp;#39; \
  | curl -s -X PUT -d @- \
  --header &amp;#39;Content-Type: application/json&amp;#39; \
  --header &amp;#39;Accept: application/json&amp;#39; \
  &amp;#39;https://your.api.endpoint/&amp;#39; \
  | jq -r .access&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I find some beauty in that.&lt;/p&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/tooling.html"&gt;tooling&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/json.html"&gt;#json&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/cli.html"&gt;#cli&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="json"></category><category term="cli"></category></entry><entry><id>urn:uuid:3f14de9f-273b-4e44-86cd-504b88225b8b</id><title>using clojure to visualize dependencies in clojure code</title><link href="https://200ok.ch/posts/using-clojure-to-visualize-dependencies-in-clojure-code.html" type="text/html" title="using clojure to visualize dependencies in clojure code" rel="alternate"></link><published>2016-12-02T00:00:00Z</published><updated>2016-12-02T00:00:00Z</updated><content type="html" xml:base="https://200ok.ch/posts/using-clojure-to-visualize-dependencies-in-clojure-code.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"&gt;&lt;meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport"&gt;&lt;link href="/apple-touch-icon.png" rel="apple-touch-icon" sizes="180x180"&gt;&lt;link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png"&gt;&lt;link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png"&gt;&lt;link href="/manifest.json" rel="manifest"&gt;&lt;link color="#5bbad5" href="/safari-pinned-tab.svg" rel="mask-icon"&gt;&lt;meta content="#ffffff" name="theme-color"&gt;&lt;link href="/css/normalize.css" rel="stylesheet"&gt;&lt;link href="/css/app.css" rel="stylesheet"&gt;&lt;title&gt;using clojure to visualize dependencies in clojure code - 200ok&lt;/title&gt;&lt;link href="/rss.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/rss+xml"&gt;&lt;link href="/atom.xml" rel="alternate" title="200ok - Consultancy, Research Lab, Incubator" type="application/atom+xml"&gt;&lt;meta content="using clojure to visualize dependencies in clojure code - 200ok" property="og:title"&gt;&lt;meta content="article" property="og:type"&gt;&lt;meta property="og:description"&gt;&lt;meta content="https://200ok.ch/posts/using-clojure-to-visualize-dependencies-in-clojure-code.html" property="og:url"&gt;&lt;meta content="https://200ok.ch/img/logo.png" property="og:image"&gt;&lt;meta content="summary" name="twitter:card"&gt;&lt;meta content="@twohundredok" name="twitter:site"&gt;&lt;meta content="using clojure to visualize dependencies in clojure code - 200ok" name="twitter:title"&gt;&lt;meta content="https://200ok.ch/img/logo.png" name="twitter:image"&gt;&lt;meta name="twitter:description"&gt;&lt;link href="https://200ok.ch/posts/using-clojure-to-visualize-dependencies-in-clojure-code.html" rel="canonical"&gt;&lt;link href="/css/styles/solarized-light.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body id="blog" itemscope itemtype="http://schema.org/Blog"&gt;&lt;div class="top-bar"&gt;&lt;div class="top-bar-left"&gt;&lt;top-bar-title itemprop="image"&gt;&lt;a href="/" id="logo"&gt;&lt;img src="/img/200ok.svg"&gt;&lt;/a&gt;&lt;/top-bar-title&gt;&lt;/div&gt;&lt;div class="top-bar-right"&gt;&lt;ul class="menu"&gt;&lt;li&gt;&lt;a href="/blog.html"&gt;Blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/projects.html"&gt;Projects&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/team.html"&gt;Team&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="/atom.xml" id="atom-feed"&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Feed&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;main class="single-post"&gt;&lt;div id="content"&gt;&lt;article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting"&gt;&lt;h3 class="headline" itemprop="headline"&gt;&lt;a class="nunito" href="/posts/using-clojure-to-visualize-dependencies-in-clojure-code.html" itemprop="url"&gt;using clojure to visualize dependencies in clojure code&lt;/a&gt;&lt;/h3&gt;&lt;div class="subheader"&gt;&lt;p class="post-meta"&gt;&lt;time itemprop="datePublished"&gt;2016-12-02&lt;/time&gt; - &lt;span itemprop="wordCount"&gt;321&lt;/span&gt; words - &lt;span itemprop="timeRequired"&gt;2&lt;/span&gt; min read&lt;/p&gt;&lt;div class="byline"&gt;&lt;img class="author-icon" src="/img/author.svg"&gt;&lt;section class="author" itemprop="author" itemscope itemtype="https://schema.org/Person"&gt;&lt;span itemprop="name"&gt;Phil Hofmann&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;&lt;span itemprop="image" itemscope itemtype="https://schema.org/ImageObject"&gt;&lt;meta content="190" itemprop="height"&gt;&lt;meta content="349" itemprop="width"&gt;&lt;meta content="https://200ok.ch/img/logo.png" itemprop="url"&gt;&lt;/span&gt;&lt;div&gt;&lt;div class="article-body" itemprop="articleBody"&gt;&lt;p&gt;TL;DR Use &lt;a href="https://gitlab.com/200ok/codegraph"&gt;codegraph&lt;/a&gt; to visualize dependencies within a Clojure file. Codegraph applied to itself will for example generate this graph:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/img/codegraph.png" alt="example codegraph graph" /&gt;&lt;figcaption&gt;example codegraph graph&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Here is how it works.&lt;/p&gt;
&lt;p&gt;The other day I wished I had a visualization of the dependencies in a piece of ClojureScript code that over the course of the year has gotten a bit unwieldy. I did some thinking and some codeing and it turns out it’s quite easy. Here are some of the highlights in code &amp;amp; images, but mostly code.&lt;/p&gt;
&lt;p&gt;Reading a string and have it evaluates in Clojure is done with &lt;code&gt;read-string&lt;/code&gt;. Reading a string and have it &lt;strong&gt;not&lt;/strong&gt; evaluated is as easy as wrapping the string in an additional set of square brackets.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(read-string (str &amp;quot;[&amp;quot; (slurp path) &amp;quot;]&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This returns the content of the file given by &lt;code&gt;path&lt;/code&gt; as a Clojure data structure. In less homoiconic languages you would probably call this an Abstract Syntax Tree. Homoiconicity for the win!&lt;/p&gt;
&lt;p&gt;The data structure is a tree that we want to walk to find dependencies in the code. Here &lt;code&gt;clojure.walk/prewalk&lt;/code&gt; comes in handy. We’ll pass it a function which will be called for every node in the tree. I went with a multimethod since I initially expected that different typo of nodes would require different action, but it turns out the only thing we’re actually interested in are symbols.&lt;/p&gt;
&lt;p&gt;If the symbol is member of a given set, namely &lt;code&gt;def&lt;/code&gt;, &lt;code&gt;defn&lt;/code&gt;, &lt;code&gt;defn-&lt;/code&gt;, &lt;code&gt;defmulti&lt;/code&gt;, and &lt;code&gt;defmethod&lt;/code&gt;, we will pay special attention to the next symbol, because it will be the dependant of the upcoming dependencies that we will record. Every subsequent occurrence of a symbol will then constitute a dependency.&lt;/p&gt;
&lt;p&gt;From there the only thing left to do is to limit the dependencies to those where the &lt;em&gt;dependee&lt;/em&gt; is also the dependant of another dependency; and render the remainder in dot syntax to be visualized by graphviz.&lt;/p&gt;
&lt;p&gt;Check out the code for more details.&lt;/p&gt;
&lt;/div&gt;&lt;div class="tags"&gt;&lt;img class="tag-icon" src="/img/tag.svg"&gt;&lt;ul itemprop="keywords"&gt;&lt;li class="category"&gt;&lt;a href="/category/tooling.html"&gt;tooling&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/clojure.html"&gt;#clojure&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/graph.html"&gt;#graph&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/dependencies.html"&gt;#dependencies&lt;/a&gt;&lt;/li&gt;&lt;li class="tag"&gt;&lt;a href="/tags/visualization.html"&gt;#visualization&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/article&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer&gt;&lt;div itemprop="publisher" itemscope itemtype="https://schema.org/Organization"&gt;&lt;div class="name" itemprop="name"&gt;200ok GmbH&lt;/div&gt;&lt;div itemprop="address" itemscope itemtype="https://schema.org/PostalAddress"&gt;&lt;a href="https://goo.gl/maps/GNAoiNF7mbL2" title="View on Google Maps"&gt;&lt;div itemprop="streetAddress"&gt;Badenerstrasse 313&lt;/div&gt;&lt;div&gt;&lt;span itemprop="postalCode"&gt;8003&lt;/span&gt; &lt;span itemprop="addressLocality"&gt;Zürich&lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;div itemprop="telephone"&gt;+41 76 405 05 67&lt;/div&gt;&lt;div itemprop="email"&gt;&lt;a href="mailto:info@200ok.ch"&gt;info@200ok.ch&lt;/a&gt;&lt;/div&gt;&lt;img itemprop="logo" src="https://200ok.ch/img/200ok.svg"&gt;&lt;/div&gt;&lt;/footer&gt;&lt;div class="scripts" style="{:display &amp;quot;none&amp;quot;}"&gt;&lt;script src="/js/vendor/bowser.min.js"&gt;&lt;/script&gt;&lt;script async src="/js/ie_safeguard.js"&gt;&lt;/script&gt;&lt;script async src="/js/tour.js"&gt;&lt;/script&gt;&lt;script src="/js/highlight.pack.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;script&gt;tour=null&lt;/script&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><author><name>200ok GmbH</name></author><category term="clojure"></category><category term="graph"></category><category term="dependencies"></category><category term="visualization"></category></entry></feed>